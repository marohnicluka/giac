%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 197 197
%%HiResBoundingBox: 0 0 197 197
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 197 197 re
W
q
q
[1 0 0 1 -187 -45] cm
q
[1 0 0 1 0 0] cm
0 0 571 288 re
W
q
[0.1 0 0 0.1 0 0] cm
q
5 5 5700 2860 re
W
20 w
/DeviceRGB {} CS
[0 0 1] SC
1940 980 m
3280 510 l
S
1940 980 m
2050 1310 l
S
1940 980 m
2680 1050 l
S
3280 510 m
3390 810 l
S
3280 510 m
3240 1610 l
S
3390 810 m
3670 1550 l
S
3390 810 m
2860 1970 l
S
3670 1550 m
3780 1870 l
S
3670 1550 m
3050 1780 l
S
3780 1870 m
2740 2230 l
S
3780 1870 m
3240 1610 l
S
2740 2230 m
2420 2350 l
S
2740 2230 m
2670 1790 l
S
2420 2350 m
2320 2030 l
S
2420 2350 m
2500 1240 l
S
2320 2030 m
2050 1310 l
S
2320 2030 m
2860 870 l
S
2050 1310 m
2320 1420 l
S
2320 1420 m
2500 1240 l
S
2320 1420 m
2670 1790 l
S
2500 1240 m
2680 1050 l
S
2680 1050 m
2860 870 l
S
2860 870 m
3420 1420 l
S
3420 1420 m
3240 1610 l
S
3240 1610 m
3050 1780 l
S
3050 1780 m
2860 1970 l
S
2860 1970 m
2670 1790 l
S
40 w
/DeviceRGB {} CS
[1 1 0] SC
1970 985 m
1970 965.66 1954.34 950 1935 950 c
1915.66 950 1900 965.66 1900 985 c
1900 1004.34 1915.66 1020 1935 1020 c
1954.34 1020 1970 1004.34 1970 985 c
S
3310 515 m
3310 495.66 3294.34 480 3275 480 c
3255.66 480 3240 495.66 3240 515 c
3240 534.34 3255.66 550 3275 550 c
3294.34 550 3310 534.34 3310 515 c
S
3420 815 m
3420 795.66 3404.34 780 3385 780 c
3365.66 780 3350 795.66 3350 815 c
3350 834.34 3365.66 850 3385 850 c
3404.34 850 3420 834.34 3420 815 c
S
3700 1555 m
3700 1535.66 3684.34 1520 3665 1520 c
3645.66 1520 3630 1535.66 3630 1555 c
3630 1574.34 3645.66 1590 3665 1590 c
3684.34 1590 3700 1574.34 3700 1555 c
S
3810 1875 m
3810 1855.66 3794.34 1840 3775 1840 c
3755.66 1840 3740 1855.66 3740 1875 c
3740 1894.34 3755.66 1910 3775 1910 c
3794.34 1910 3810 1894.34 3810 1875 c
S
2770 2235 m
2770 2215.66 2754.34 2200 2735 2200 c
2715.66 2200 2700 2215.66 2700 2235 c
2700 2254.34 2715.66 2270 2735 2270 c
2754.34 2270 2770 2254.34 2770 2235 c
S
2450 2355 m
2450 2335.66 2434.34 2320 2415 2320 c
2395.66 2320 2380 2335.66 2380 2355 c
2380 2374.34 2395.66 2390 2415 2390 c
2434.34 2390 2450 2374.34 2450 2355 c
S
2350 2035 m
2350 2015.66 2334.34 2000 2315 2000 c
2295.66 2000 2280 2015.66 2280 2035 c
2280 2054.34 2295.66 2070 2315 2070 c
2334.34 2070 2350 2054.34 2350 2035 c
S
2080 1315 m
2080 1295.66 2064.34 1280 2045 1280 c
2025.66 1280 2010 1295.66 2010 1315 c
2010 1334.34 2025.66 1350 2045 1350 c
2064.34 1350 2080 1334.34 2080 1315 c
S
2350 1425 m
2350 1405.66 2334.34 1390 2315 1390 c
2295.66 1390 2280 1405.66 2280 1425 c
2280 1444.34 2295.66 1460 2315 1460 c
2334.34 1460 2350 1444.34 2350 1425 c
S
2530 1245 m
2530 1225.66 2514.34 1210 2495 1210 c
2475.66 1210 2460 1225.66 2460 1245 c
2460 1264.34 2475.66 1280 2495 1280 c
2514.34 1280 2530 1264.34 2530 1245 c
S
2710 1055 m
2710 1035.66 2694.34 1020 2675 1020 c
2655.66 1020 2640 1035.66 2640 1055 c
2640 1074.34 2655.66 1090 2675 1090 c
2694.34 1090 2710 1074.34 2710 1055 c
S
2890 875 m
2890 855.66 2874.34 840 2855 840 c
2835.66 840 2820 855.66 2820 875 c
2820 894.34 2835.66 910 2855 910 c
2874.34 910 2890 894.34 2890 875 c
S
3450 1425 m
3450 1405.66 3434.34 1390 3415 1390 c
3395.66 1390 3380 1405.66 3380 1425 c
3380 1444.34 3395.66 1460 3415 1460 c
3434.34 1460 3450 1444.34 3450 1425 c
S
3270 1615 m
3270 1595.66 3254.34 1580 3235 1580 c
3215.66 1580 3200 1595.66 3200 1615 c
3200 1634.34 3215.66 1650 3235 1650 c
3254.34 1650 3270 1634.34 3270 1615 c
S
3080 1785 m
3080 1765.66 3064.34 1750 3045 1750 c
3025.66 1750 3010 1765.66 3010 1785 c
3010 1804.34 3025.66 1820 3045 1820 c
3064.34 1820 3080 1804.34 3080 1785 c
S
2890 1975 m
2890 1955.66 2874.34 1940 2855 1940 c
2835.66 1940 2820 1955.66 2820 1975 c
2820 1994.34 2835.66 2010 2855 2010 c
2874.34 2010 2890 1994.34 2890 1975 c
S
2700 1795 m
2700 1775.66 2684.34 1760 2665 1760 c
2645.66 1760 2630 1775.66 2630 1795 c
2630 1814.34 2645.66 1830 2665 1830 c
2684.34 1830 2700 1814.34 2700 1795 c
S
Q
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
