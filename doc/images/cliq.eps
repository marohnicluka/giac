%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 390 184
%%HiResBoundingBox: 0 0 390 184
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 390 184 re
W
q
q
[1 0 0 1 0 0] cm
q
[1 0 0 1 0 0] cm
0 0 390 184 re
W
q
[0.1 0 0 0.1 0 0] cm
{} settransfer
20 w
/DeviceRGB {} CS
[1 0 0] SC
120 1730 m
1710 1730 l
S
120 1730 m
1710 130 l
S
120 1730 m
120 130 l
S
1710 1730 m
1710 130 l
S
1710 1730 m
120 130 l
S
1710 130 m
120 130 l
S
/DeviceRGB {} CS
[0 0 1] SC
3090 1330 m
3780 130 l
S
3090 1330 m
2400 130 l
S
3780 130 m
2400 130 l
S
40 w
/DeviceRGB {} CS
[0 1 0] SC
150 1735 m
150 1715.66 134.34 1700 115 1700 c
95.6602 1700 80 1715.66 80 1735 c
80 1754.34 95.6602 1770 115 1770 c
134.34 1770 150 1754.34 150 1735 c
S
1740 1735 m
1740 1715.66 1724.34 1700 1705 1700 c
1685.66 1700 1670 1715.66 1670 1735 c
1670 1754.34 1685.66 1770 1705 1770 c
1724.34 1770 1740 1754.34 1740 1735 c
S
1740 135 m
1740 115.66 1724.34 100 1705 100 c
1685.66 100 1670 115.66 1670 135 c
1670 154.34 1685.66 170 1705 170 c
1724.34 170 1740 154.34 1740 135 c
S
150 135 m
150 115.66 134.34 100 115 100 c
95.6602 100 80 115.66 80 135 c
80 154.34 95.6602 170 115 170 c
134.34 170 150 154.34 150 135 c
S
/DeviceRGB {} CS
[1 1 0] SC
3120 1335 m
3120 1315.66 3104.34 1300 3085 1300 c
3065.66 1300 3050 1315.66 3050 1335 c
3050 1354.34 3065.66 1370 3085 1370 c
3104.34 1370 3120 1354.34 3120 1335 c
S
3810 135 m
3810 115.66 3794.34 100 3775 100 c
3755.66 100 3740 115.66 3740 135 c
3740 154.34 3755.66 170 3775 170 c
3794.34 170 3810 154.34 3810 135 c
S
2430 135 m
2430 115.66 2414.34 100 2395 100 c
2375.66 100 2360 115.66 2360 135 c
2360 154.34 2375.66 170 2395 170 c
2414.34 170 2430 154.34 2430 135 c
S
10 w
/DeviceGray {} CS
[0] SC
120 1730 m
130 1730 l
S
/DeviceGray {} cs
[0] sc
81.0898 1774.53 m
81.0898 1813.91 68.5898 1833.44 44.0586 1833.44 c
19.5313 1833.44 6.87891 1813.59 6.87891 1775.47 c
6.87891 1737.34 19.6914 1717.66 44.0586 1717.66 c
67.9688 1717.66 81.0898 1737.34 81.0898 1774.53 c
h
66.7188 1775.78 m
66.7188 1743.75 59.3789 1729.22 43.75 1729.22 c
28.75 1729.22 21.25 1744.38 21.25 1775.31 c
21.25 1806.41 28.75 1820.94 44.0586 1820.94 c
59.2188 1820.94 66.7188 1806.25 66.7188 1775.78 c
f
1710 1730 m
1720 1730 l
S
1795.47 1720 m
1795.47 1833.44 l
1786.25 1833.44 l
1781.25 1815.94 1778.12 1813.59 1756.25 1810.94 c
1756.25 1800.78 l
1781.41 1800.78 l
1781.41 1720 l
1795.47 1720 l
f
1710 130 m
1720 130 l
S
1821.72 90.1602 m
1821.72 109.379 1806.88 123.441 1785.47 123.441 c
1762.19 123.441 1748.75 111.559 1747.97 84.0586 c
1762.03 84.0586 l
1763.12 103.121 1771.09 111.09 1785 111.09 c
1797.81 111.09 1807.34 102.031 1807.34 89.8398 c
1807.34 80.9414 1802.03 73.1211 1792.03 67.5 c
1777.34 59.0586 l
1753.59 45.6211 1746.72 35 1745.47 10 c
1820.94 10 l
1820.94 23.9102 l
1761.25 23.9102 l
1762.66 33.1211 1767.81 39.0586 1781.72 47.3398 c
1797.81 55.9414 l
1813.59 64.3789 1821.72 76.25 1821.72 90.1602 c
f
120 130 m
130 130 l
S
80.9414 42.9688 m
80.9414 56.7188 75.3086 64.6914 61.7188 69.3789 c
72.3398 73.5898 77.6602 80.9414 77.6602 92.1914 c
77.6602 111.719 64.6914 123.441 42.9688 123.441 c
20.1602 123.441 7.96875 110.941 7.5 86.8789 c
21.5586 86.8789 l
21.8789 103.59 28.75 111.09 43.1211 111.09 c
55.6211 111.09 63.1211 103.75 63.1211 91.7188 c
63.1211 79.5313 57.9688 74.6914 35.3086 74.6914 c
35.3086 62.8086 l
42.9688 62.8086 l
58.5898 62.8086 66.5586 55.4688 66.5586 42.8086 c
66.5586 28.5898 57.8086 20.1602 42.9688 20.1602 c
27.6602 20.1602 20.1602 27.8086 19.2188 44.2188 c
5.16016 44.2188 l
6.87891 18.9102 19.3789 7.66016 42.5 7.66016 c
65.9414 7.66016 80.9414 21.5586 80.9414 42.9688 c
f
3090 1330 m
3100 1330 l
S
3203.12 1347.19 m
3203.12 1359.84 l
3186.41 1359.84 l
3186.41 1433.44 l
3175.94 1433.44 l
3124.53 1362.03 l
3124.53 1347.19 l
3172.34 1347.19 l
3172.34 1320 l
3186.41 1320 l
3186.41 1347.19 l
3203.12 1347.19 l
h
3172.34 1359.84 m
3136.88 1359.84 l
3172.34 1409.38 l
3172.34 1359.84 l
h
f
3780 130 m
3790 130 l
S
3892.03 47.6602 m
3892.03 70 3877.19 84.6914 3855.47 84.6914 c
3847.5 84.6914 3841.09 82.6602 3834.53 77.8086 c
3838.91 107.191 l
3886.09 107.191 l
3886.09 121.09 l
3827.66 121.09 l
3819.06 61.7188 l
3832.03 61.7188 l
3838.59 69.5313 3844.06 72.1914 3852.81 72.1914 c
3868.12 72.1914 3877.66 62.5 3877.66 45.6211 c
3877.66 29.3789 3868.28 20.1602 3852.81 20.1602 c
3840.62 20.1602 3832.97 26.25 3829.69 39.0586 c
3815.62 39.0586 l
3820.31 16.5586 3832.97 7.66016 3853.12 7.66016 c
3876.09 7.66016 3892.03 23.5898 3892.03 47.6602 c
f
2400 130 m
2410 130 l
S
2362.03 45.1602 m
2362.03 66.25 2347.66 80.6211 2327.34 80.6211 c
2316.09 80.6211 2307.34 76.25 2301.25 67.9688 c
2301.41 95.6211 2310.47 110.941 2326.56 110.941 c
2336.41 110.941 2343.44 104.691 2345.62 93.9102 c
2359.69 93.9102 l
2357.03 112.34 2344.84 123.441 2327.5 123.441 c
2301.09 123.441 2286.88 101.25 2286.88 61.7188 c
2286.88 26.25 2299.06 7.66016 2325 7.66016 c
2346.56 7.66016 2362.03 22.9688 2362.03 45.1602 c
h
2347.66 44.0586 m
2347.66 29.8398 2338.12 20.1602 2325.16 20.1602 c
2312.03 20.1602 2302.03 30.3086 2302.03 44.8398 c
2302.03 58.9102 2311.72 68.1211 2325.62 68.1211 c
2339.22 68.1211 2347.66 59.2188 2347.66 44.0586 c
f
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
