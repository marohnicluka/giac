%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 362 208
%%HiResBoundingBox: 0 0 362 208
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 362 208 re
W
q
q
[1 0 0 1 0 0] cm
q
[1 0 0 1 0 0] cm
0 0 362 208 re
W
q
[0.1 0 0 0.1 0 0] cm
{} settransfer
20 w
/DeviceRGB {} CS
[0 0 1] SC
120 1970 m
120 1180 l
S
/DeviceRGB {} cs
[0 0 1] sc
120 1180 m
180 1290 l
60 1290 l
f
120 1180 m
120 130 l
S
120 130 m
640 920 l
S
640 920 m
540 860 l
640 800 l
f
640 920 m
1340 1970 l
S
120 130 m
980 780 l
S
980 780 m
860 760 l
930 660 l
f
980 780 m
2560 1970 l
S
1340 1970 m
2000 970 l
S
2000 970 m
2000 1090 l
1900 1020 l
f
2000 970 m
2560 130 l
S
2560 1970 m
2560 1180 l
S
2560 1180 m
2620 1290 l
2500 1290 l
f
2560 1180 m
2560 130 l
S
q
0 1370 720 710 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
150 1975 m
150 1955.66 134.34 1940 115 1940 c
95.6602 1940 80 1955.66 80 1975 c
80 1994.34 95.6602 2010 115 2010 c
134.34 2010 150 1994.34 150 1975 c
S
Q
q
0 0 720 740 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
150 135 m
150 115.66 134.34 100 115 100 c
95.6602 100 80 115.66 80 135 c
80 154.34 95.6602 170 115 170 c
134.34 170 150 154.34 150 135 c
S
Q
q
730 1370 1210 710 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
1370 1975 m
1370 1955.66 1354.34 1940 1335 1940 c
1315.66 1940 1300 1955.66 1300 1975 c
1300 1994.34 1315.66 2010 1335 2010 c
1354.34 2010 1370 1994.34 1370 1975 c
S
Q
q
1950 1370 1210 710 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
2590 1975 m
2590 1955.66 2574.34 1940 2555 1940 c
2535.66 1940 2520 1955.66 2520 1975 c
2520 1994.34 2535.66 2010 2555 2010 c
2574.34 2010 2590 1994.34 2590 1975 c
S
Q
q
1950 0 1210 740 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
2590 135 m
2590 115.66 2574.34 100 2555 100 c
2535.66 100 2520 115.66 2520 135 c
2520 154.34 2535.66 170 2555 170 c
2574.34 170 2590 154.34 2590 135 c
S
Q
q
2890 0 730 740 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
3530 135 m
3530 115.66 3514.34 100 3495 100 c
3475.66 100 3460 115.66 3460 135 c
3460 154.34 3475.66 170 3495 170 c
3514.34 170 3530 154.34 3530 135 c
S
Q
10 w
/DeviceGray {} CS
[0] SC
120 1970 m
130 1970 l
S
/DeviceGray {} cs
[0] sc
205.469 1960 m
205.469 2073.44 l
196.25 2073.44 l
191.25 2055.94 188.121 2053.59 166.25 2050.94 c
166.25 2040.78 l
191.41 2040.78 l
191.41 1960 l
205.469 1960 l
f
120 130 m
130 130 l
S
81.7188 90.1602 m
81.7188 109.379 66.8789 123.441 45.4688 123.441 c
22.1914 123.441 8.75 111.559 7.96875 84.0586 c
22.0313 84.0586 l
23.1211 103.121 31.0898 111.09 45 111.09 c
57.8086 111.09 67.3398 102.031 67.3398 89.8398 c
67.3398 80.9414 62.0313 73.1211 52.0313 67.5 c
37.3398 59.0586 l
13.5898 45.6211 6.71875 35 5.46875 10 c
80.9414 10 l
80.9414 23.9102 l
21.25 23.9102 l
22.6602 33.1211 27.8086 39.0586 41.7188 47.3398 c
57.8086 55.9414 l
73.5898 64.3789 81.7188 76.25 81.7188 90.1602 c
f
1340 1970 m
1350 1970 l
S
1450.94 1992.97 m
1450.94 2006.72 1445.31 2014.69 1431.72 2019.38 c
1442.34 2023.59 1447.66 2030.94 1447.66 2042.19 c
1447.66 2061.72 1434.69 2073.44 1412.97 2073.44 c
1390.16 2073.44 1377.97 2060.94 1377.5 2036.88 c
1391.56 2036.88 l
1391.88 2053.59 1398.75 2061.09 1413.12 2061.09 c
1425.62 2061.09 1433.12 2053.75 1433.12 2041.72 c
1433.12 2029.53 1427.97 2024.69 1405.31 2024.69 c
1405.31 2012.81 l
1412.97 2012.81 l
1428.59 2012.81 1436.56 2005.47 1436.56 1992.81 c
1436.56 1978.59 1427.81 1970.16 1412.97 1970.16 c
1397.66 1970.16 1390.16 1977.81 1389.22 1994.22 c
1375.16 1994.22 l
1376.88 1968.91 1389.38 1957.66 1412.5 1957.66 c
1435.94 1957.66 1450.94 1971.56 1450.94 1992.97 c
f
2560 1970 m
2570 1970 l
S
2673.12 1987.19 m
2673.12 1999.84 l
2656.41 1999.84 l
2656.41 2073.44 l
2645.94 2073.44 l
2594.53 2002.03 l
2594.53 1987.19 l
2642.34 1987.19 l
2642.34 1960 l
2656.41 1960 l
2656.41 1987.19 l
2673.12 1987.19 l
h
2642.34 1999.84 m
2606.88 1999.84 l
2642.34 2049.38 l
2642.34 1999.84 l
h
f
2560 130 m
2570 130 l
S
2672.03 47.6602 m
2672.03 70 2657.19 84.6914 2635.47 84.6914 c
2627.5 84.6914 2621.09 82.6602 2614.53 77.8086 c
2618.91 107.191 l
2666.09 107.191 l
2666.09 121.09 l
2607.66 121.09 l
2599.06 61.7188 l
2612.03 61.7188 l
2618.59 69.5313 2624.06 72.1914 2632.81 72.1914 c
2648.12 72.1914 2657.66 62.5 2657.66 45.6211 c
2657.66 29.3789 2648.28 20.1602 2632.81 20.1602 c
2620.62 20.1602 2612.97 26.25 2609.69 39.0586 c
2595.62 39.0586 l
2600.31 16.5586 2612.97 7.66016 2633.12 7.66016 c
2656.09 7.66016 2672.03 23.5898 2672.03 47.6602 c
f
3500 130 m
3510 130 l
S
3612.03 155.16 m
3612.03 176.25 3597.66 190.621 3577.34 190.621 c
3566.09 190.621 3557.34 186.25 3551.25 177.969 c
3551.41 205.621 3560.47 220.941 3576.56 220.941 c
3586.41 220.941 3593.44 214.691 3595.62 203.91 c
3609.69 203.91 l
3607.03 222.34 3594.84 233.441 3577.5 233.441 c
3551.09 233.441 3536.88 211.25 3536.88 171.719 c
3536.88 136.25 3549.06 117.66 3575 117.66 c
3596.56 117.66 3612.03 132.969 3612.03 155.16 c
h
3597.66 154.059 m
3597.66 139.84 3588.12 130.16 3575.16 130.16 c
3562.03 130.16 3552.03 140.309 3552.03 154.84 c
3552.03 168.91 3561.72 178.121 3575.62 178.121 c
3589.22 178.121 3597.66 169.219 3597.66 154.059 c
f
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
