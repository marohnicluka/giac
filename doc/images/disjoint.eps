%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 328 208
%%HiResBoundingBox: 0 0 328 208
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 328 208 re
W
q
q
[1 0 0 1 0 0] cm
q
[1 0 0 1 0 0] cm
0 0 328 208 re
W
q
[0.1 0 0 0.1 0 0] cm
{} settransfer
20 w
/DeviceRGB {} CS
[0 0 1] SC
2100 1720 m
3020 130 l
S
2100 1720 m
1180 130 l
S
3020 130 m
1180 130 l
S
260 1970 m
260 1050 l
S
260 1050 m
260 130 l
S
40 w
/DeviceRGB {} CS
[1 1 0] SC
2130 1725 m
2130 1705.66 2114.34 1690 2095 1690 c
2075.66 1690 2060 1705.66 2060 1725 c
2060 1744.34 2075.66 1760 2095 1760 c
2114.34 1760 2130 1744.34 2130 1725 c
S
q
2410 0 870 740 re
W
3050 135 m
3050 115.66 3034.34 100 3015 100 c
2995.66 100 2980 115.66 2980 135 c
2980 154.34 2995.66 170 3015 170 c
3034.34 170 3050 154.34 3050 135 c
S
Q
q
570 0 1210 740 re
W
1210 135 m
1210 115.66 1194.34 100 1175 100 c
1155.66 100 1140 115.66 1140 135 c
1140 154.34 1155.66 170 1175 170 c
1194.34 170 1210 154.34 1210 135 c
S
Q
q
0 1370 860 710 re
W
290 1975 m
290 1955.66 274.34 1940 255 1940 c
235.66 1940 220 1955.66 220 1975 c
220 1994.34 235.66 2010 255 2010 c
274.34 2010 290 1994.34 290 1975 c
S
Q
290 1055 m
290 1035.66 274.34 1020 255 1020 c
235.66 1020 220 1035.66 220 1055 c
220 1074.34 235.66 1090 255 1090 c
274.34 1090 290 1074.34 290 1055 c
S
q
0 0 860 740 re
W
290 135 m
290 115.66 274.34 100 255 100 c
235.66 100 220 115.66 220 135 c
220 154.34 235.66 170 255 170 c
274.34 170 290 154.34 290 135 c
S
Q
10 w
/DeviceGray {} CS
[0] SC
2100 1720 m
2110 1720 l
S
/DeviceGray {} cs
[0] sc
2185.47 1710 m
2185.47 1823.44 l
2176.25 1823.44 l
2171.25 1805.94 2168.12 1803.59 2146.25 1800.94 c
2146.25 1790.78 l
2171.41 1790.78 l
2171.41 1710 l
2185.47 1710 l
f
2253.4 1726.56 m
2236.68 1726.56 l
2236.68 1710 l
2253.4 1710 l
2253.4 1726.56 l
h
2253.4 1793.91 m
2236.68 1793.91 l
2236.68 1777.19 l
2253.4 1777.19 l
2253.4 1793.91 l
f
2326.52 1710 m
2326.52 1823.44 l
2317.3 1823.44 l
2312.3 1805.94 2309.18 1803.59 2287.3 1800.94 c
2287.3 1790.78 l
2312.46 1790.78 l
2312.46 1710 l
2326.52 1710 l
f
3020 130 m
3030 130 l
S
3105.47 10 m
3105.47 123.441 l
3096.25 123.441 l
3091.25 105.941 3088.12 103.59 3066.25 100.941 c
3066.25 90.7813 l
3091.41 90.7813 l
3091.41 10 l
3105.47 10 l
f
3173.4 26.5586 m
3156.68 26.5586 l
3156.68 10 l
3173.4 10 l
3173.4 26.5586 l
h
3173.4 93.9102 m
3156.68 93.9102 l
3156.68 77.1914 l
3173.4 77.1914 l
3173.4 93.9102 l
f
3272.77 90.1602 m
3272.77 109.379 3257.93 123.441 3236.52 123.441 c
3213.24 123.441 3199.8 111.559 3199.02 84.0586 c
3213.09 84.0586 l
3214.18 103.121 3222.15 111.09 3236.05 111.09 c
3248.87 111.09 3258.4 102.031 3258.4 89.8398 c
3258.4 80.9414 3253.09 73.1211 3243.09 67.5 c
3228.4 59.0586 l
3204.65 45.6211 3197.77 35 3196.52 10 c
3271.99 10 l
3271.99 23.9102 l
3212.3 23.9102 l
3213.71 33.1211 3218.87 39.0586 3232.77 47.3398 c
3248.87 55.9414 l
3264.65 64.3789 3272.77 76.25 3272.77 90.1602 c
f
1180 130 m
1190 130 l
S
975.469 10 m
975.469 123.441 l
966.25 123.441 l
961.25 105.941 958.121 103.59 936.25 100.941 c
936.25 90.7813 l
961.41 90.7813 l
961.41 10 l
975.469 10 l
f
1043.4 26.5586 m
1026.68 26.5586 l
1026.68 10 l
1043.4 10 l
1043.4 26.5586 l
h
1043.4 93.9102 m
1026.68 93.9102 l
1026.68 77.1914 l
1043.4 77.1914 l
1043.4 93.9102 l
f
1141.99 42.9688 m
1141.99 56.7188 1136.37 64.6914 1122.77 69.3789 c
1133.4 73.5898 1138.71 80.9414 1138.71 92.1914 c
1138.71 111.719 1125.74 123.441 1104.02 123.441 c
1081.21 123.441 1069.02 110.941 1068.55 86.8789 c
1082.62 86.8789 l
1082.93 103.59 1089.8 111.09 1104.18 111.09 c
1116.68 111.09 1124.18 103.75 1124.18 91.7188 c
1124.18 79.5313 1119.02 74.6914 1096.37 74.6914 c
1096.37 62.8086 l
1104.02 62.8086 l
1119.65 62.8086 1127.62 55.4688 1127.62 42.8086 c
1127.62 28.5898 1118.87 20.1602 1104.02 20.1602 c
1088.71 20.1602 1081.21 27.8086 1080.27 44.2188 c
1066.21 44.2188 l
1067.93 18.9102 1080.43 7.66016 1103.55 7.66016 c
1126.99 7.66016 1141.99 21.5586 1141.99 42.9688 c
f
260 1970 m
270 1970 l
S
371.719 2040.16 m
371.719 2059.38 356.879 2073.44 335.469 2073.44 c
312.191 2073.44 298.75 2061.56 297.969 2034.06 c
312.031 2034.06 l
313.121 2053.12 321.09 2061.09 335 2061.09 c
347.809 2061.09 357.34 2052.03 357.34 2039.84 c
357.34 2030.94 352.031 2023.12 342.031 2017.5 c
327.34 2009.06 l
303.59 1995.62 296.719 1985 295.469 1960 c
370.941 1960 l
370.941 1973.91 l
311.25 1973.91 l
312.66 1983.12 317.809 1989.06 331.719 1997.34 c
347.809 2005.94 l
363.59 2014.38 371.719 2026.25 371.719 2040.16 c
f
413.398 1976.56 m
396.68 1976.56 l
396.68 1960 l
413.398 1960 l
413.398 1976.56 l
h
413.398 2043.91 m
396.68 2043.91 l
396.68 2027.19 l
413.398 2027.19 l
413.398 2043.91 l
f
486.52 1960 m
486.52 2073.44 l
477.301 2073.44 l
472.301 2055.94 469.18 2053.59 447.301 2050.94 c
447.301 2040.78 l
472.461 2040.78 l
472.461 1960 l
486.52 1960 l
f
260 1050 m
270 1050 l
S
371.719 1120.16 m
371.719 1139.38 356.879 1153.44 335.469 1153.44 c
312.191 1153.44 298.75 1141.56 297.969 1114.06 c
312.031 1114.06 l
313.121 1133.12 321.09 1141.09 335 1141.09 c
347.809 1141.09 357.34 1132.03 357.34 1119.84 c
357.34 1110.94 352.031 1103.12 342.031 1097.5 c
327.34 1089.06 l
303.59 1075.62 296.719 1065 295.469 1040 c
370.941 1040 l
370.941 1053.91 l
311.25 1053.91 l
312.66 1063.12 317.809 1069.06 331.719 1077.34 c
347.809 1085.94 l
363.59 1094.38 371.719 1106.25 371.719 1120.16 c
f
413.398 1056.56 m
396.68 1056.56 l
396.68 1040 l
413.398 1040 l
413.398 1056.56 l
h
413.398 1123.91 m
396.68 1123.91 l
396.68 1107.19 l
413.398 1107.19 l
413.398 1123.91 l
f
512.77 1120.16 m
512.77 1139.38 497.93 1153.44 476.52 1153.44 c
453.238 1153.44 439.801 1141.56 439.02 1114.06 c
453.09 1114.06 l
454.18 1133.12 462.148 1141.09 476.051 1141.09 c
488.871 1141.09 498.398 1132.03 498.398 1119.84 c
498.398 1110.94 493.09 1103.12 483.09 1097.5 c
468.398 1089.06 l
444.648 1075.62 437.77 1065 436.52 1040 c
511.988 1040 l
511.988 1053.91 l
452.301 1053.91 l
453.711 1063.12 458.871 1069.06 472.77 1077.34 c
488.871 1085.94 l
504.648 1094.38 512.77 1106.25 512.77 1120.16 c
f
260 130 m
270 130 l
S
81.7188 90.1602 m
81.7188 109.379 66.8789 123.441 45.4688 123.441 c
22.1914 123.441 8.75 111.559 7.96875 84.0586 c
22.0313 84.0586 l
23.1211 103.121 31.0898 111.09 45 111.09 c
57.8086 111.09 67.3398 102.031 67.3398 89.8398 c
67.3398 80.9414 62.0313 73.1211 52.0313 67.5 c
37.3398 59.0586 l
13.5898 45.6211 6.71875 35 5.46875 10 c
80.9414 10 l
80.9414 23.9102 l
21.25 23.9102 l
22.6602 33.1211 27.8086 39.0586 41.7188 47.3398 c
57.8086 55.9414 l
73.5898 64.3789 81.7188 76.25 81.7188 90.1602 c
f
123.398 26.5586 m
106.68 26.5586 l
106.68 10 l
123.398 10 l
123.398 26.5586 l
h
123.398 93.9102 m
106.68 93.9102 l
106.68 77.1914 l
123.398 77.1914 l
123.398 93.9102 l
f
221.988 42.9688 m
221.988 56.7188 216.371 64.6914 202.77 69.3789 c
213.398 73.5898 218.711 80.9414 218.711 92.1914 c
218.711 111.719 205.738 123.441 184.02 123.441 c
161.211 123.441 149.02 110.941 148.551 86.8789 c
162.621 86.8789 l
162.93 103.59 169.801 111.09 184.18 111.09 c
196.68 111.09 204.18 103.75 204.18 91.7188 c
204.18 79.5313 199.02 74.6914 176.371 74.6914 c
176.371 62.8086 l
184.02 62.8086 l
199.648 62.8086 207.621 55.4688 207.621 42.8086 c
207.621 28.5898 198.871 20.1602 184.02 20.1602 c
168.711 20.1602 161.211 27.8086 160.27 44.2188 c
146.211 44.2188 l
147.93 18.9102 160.43 7.66016 183.551 7.66016 c
206.988 7.66016 221.988 21.5586 221.988 42.9688 c
f
{} settransfer
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
