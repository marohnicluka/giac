%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 351 197
%%HiResBoundingBox: 0 0 351 197
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 351 197 re
W
q
q
[1 0 0 1 -110 -45] cm
q
[1 0 0 1 0 0] cm
0 0 571 288 re
W
q
[0.1 0 0 0.1 0 0] cm
q
5 5 5700 2860 re
W
20 w
/DeviceRGB {} CS
[0 0 1] SC
2500 1630 m
2200 1460 l
S
1250 1180 m
1570 1110 l
S
2200 1460 m
2290 1100 l
S
2200 1460 m
1790 1580 l
S
1740 770 m
1590 520 l
S
1740 770 m
2160 750 l
S
1740 770 m
1450 730 l
S
1740 770 m
1570 1110 l
S
1170 510 m
1450 730 l
S
2290 1100 m
2160 750 l
S
1560 1780 m
1790 1580 l
S
1590 520 m
1450 730 l
S
2400 510 m
2160 750 l
S
1790 2350 m
1800 2020 l
S
1450 730 m
1570 1110 l
S
1800 2020 m
1790 1580 l
S
1570 1110 m
1790 1580 l
S
3010 920 m
3160 710 l
S
3010 920 m
3260 1000 l
S
4210 700 m
4050 950 l
S
3160 710 m
3550 870 l
S
3160 710 m
2900 510 l
S
4340 920 m
4050 950 l
S
3550 870 m
3440 1120 l
S
3550 870 m
3590 580 l
S
3550 870 m
4050 950 l
S
3550 870 m
3260 1000 l
S
4320 1240 m
4050 950 l
S
4320 1240 m
4550 1440 l
S
3440 1120 m
3260 1000 l
S
40 w
/DeviceRGB {} CS
[1 1 0] SC
2530 1635 m
2530 1615.66 2514.34 1600 2495 1600 c
2475.66 1600 2460 1615.66 2460 1635 c
2460 1654.34 2475.66 1670 2495 1670 c
2514.34 1670 2530 1654.34 2530 1635 c
S
1280 1185 m
1280 1165.66 1264.34 1150 1245 1150 c
1225.66 1150 1210 1165.66 1210 1185 c
1210 1204.34 1225.66 1220 1245 1220 c
1264.34 1220 1280 1204.34 1280 1185 c
S
2230 1465 m
2230 1445.66 2214.34 1430 2195 1430 c
2175.66 1430 2160 1445.66 2160 1465 c
2160 1484.34 2175.66 1500 2195 1500 c
2214.34 1500 2230 1484.34 2230 1465 c
S
1770 775 m
1770 755.66 1754.34 740 1735 740 c
1715.66 740 1700 755.66 1700 775 c
1700 794.34 1715.66 810 1735 810 c
1754.34 810 1770 794.34 1770 775 c
S
1200 515 m
1200 495.66 1184.34 480 1165 480 c
1145.66 480 1130 495.66 1130 515 c
1130 534.34 1145.66 550 1165 550 c
1184.34 550 1200 534.34 1200 515 c
S
2320 1105 m
2320 1085.66 2304.34 1070 2285 1070 c
2265.66 1070 2250 1085.66 2250 1105 c
2250 1124.34 2265.66 1140 2285 1140 c
2304.34 1140 2320 1124.34 2320 1105 c
S
1590 1785 m
1590 1765.66 1574.34 1750 1555 1750 c
1535.66 1750 1520 1765.66 1520 1785 c
1520 1804.34 1535.66 1820 1555 1820 c
1574.34 1820 1590 1804.34 1590 1785 c
S
1620 525 m
1620 505.66 1604.34 490 1585 490 c
1565.66 490 1550 505.66 1550 525 c
1550 544.34 1565.66 560 1585 560 c
1604.34 560 1620 544.34 1620 525 c
S
2430 515 m
2430 495.66 2414.34 480 2395 480 c
2375.66 480 2360 495.66 2360 515 c
2360 534.34 2375.66 550 2395 550 c
2414.34 550 2430 534.34 2430 515 c
S
2190 755 m
2190 735.66 2174.34 720 2155 720 c
2135.66 720 2120 735.66 2120 755 c
2120 774.34 2135.66 790 2155 790 c
2174.34 790 2190 774.34 2190 755 c
S
1820 2355 m
1820 2335.66 1804.34 2320 1785 2320 c
1765.66 2320 1750 2335.66 1750 2355 c
1750 2374.34 1765.66 2390 1785 2390 c
1804.34 2390 1820 2374.34 1820 2355 c
S
1480 735 m
1480 715.66 1464.34 700 1445 700 c
1425.66 700 1410 715.66 1410 735 c
1410 754.34 1425.66 770 1445 770 c
1464.34 770 1480 754.34 1480 735 c
S
1830 2025 m
1830 2005.66 1814.34 1990 1795 1990 c
1775.66 1990 1760 2005.66 1760 2025 c
1760 2044.34 1775.66 2060 1795 2060 c
1814.34 2060 1830 2044.34 1830 2025 c
S
1600 1115 m
1600 1095.66 1584.34 1080 1565 1080 c
1545.66 1080 1530 1095.66 1530 1115 c
1530 1134.34 1545.66 1150 1565 1150 c
1584.34 1150 1600 1134.34 1600 1115 c
S
1820 1585 m
1820 1565.66 1804.34 1550 1785 1550 c
1765.66 1550 1750 1565.66 1750 1585 c
1750 1604.34 1765.66 1620 1785 1620 c
1804.34 1620 1820 1604.34 1820 1585 c
S
3040 925 m
3040 905.66 3024.34 890 3005 890 c
2985.66 890 2970 905.66 2970 925 c
2970 944.34 2985.66 960 3005 960 c
3024.34 960 3040 944.34 3040 925 c
S
4240 705 m
4240 685.66 4224.34 670 4205 670 c
4185.66 670 4170 685.66 4170 705 c
4170 724.34 4185.66 740 4205 740 c
4224.34 740 4240 724.34 4240 705 c
S
3190 715 m
3190 695.66 3174.34 680 3155 680 c
3135.66 680 3120 695.66 3120 715 c
3120 734.34 3135.66 750 3155 750 c
3174.34 750 3190 734.34 3190 715 c
S
4370 925 m
4370 905.66 4354.34 890 4335 890 c
4315.66 890 4300 905.66 4300 925 c
4300 944.34 4315.66 960 4335 960 c
4354.34 960 4370 944.34 4370 925 c
S
3580 875 m
3580 855.66 3564.34 840 3545 840 c
3525.66 840 3510 855.66 3510 875 c
3510 894.34 3525.66 910 3545 910 c
3564.34 910 3580 894.34 3580 875 c
S
4350 1245 m
4350 1225.66 4334.34 1210 4315 1210 c
4295.66 1210 4280 1225.66 4280 1245 c
4280 1264.34 4295.66 1280 4315 1280 c
4334.34 1280 4350 1264.34 4350 1245 c
S
3470 1125 m
3470 1105.66 3454.34 1090 3435 1090 c
3415.66 1090 3400 1105.66 3400 1125 c
3400 1144.34 3415.66 1160 3435 1160 c
3454.34 1160 3470 1144.34 3470 1125 c
S
2930 515 m
2930 495.66 2914.34 480 2895 480 c
2875.66 480 2860 495.66 2860 515 c
2860 534.34 2875.66 550 2895 550 c
2914.34 550 2930 534.34 2930 515 c
S
3620 585 m
3620 565.66 3604.34 550 3585 550 c
3565.66 550 3550 565.66 3550 585 c
3550 604.34 3565.66 620 3585 620 c
3604.34 620 3620 604.34 3620 585 c
S
4080 955 m
4080 935.66 4064.34 920 4045 920 c
4025.66 920 4010 935.66 4010 955 c
4010 974.34 4025.66 990 4045 990 c
4064.34 990 4080 974.34 4080 955 c
S
4580 1445 m
4580 1425.66 4564.34 1410 4545 1410 c
4525.66 1410 4510 1425.66 4510 1445 c
4510 1464.34 4525.66 1480 4545 1480 c
4564.34 1480 4580 1464.34 4580 1445 c
S
3290 1005 m
3290 985.66 3274.34 970 3255 970 c
3235.66 970 3220 985.66 3220 1005 c
3220 1024.34 3235.66 1040 3255 1040 c
3274.34 1040 3290 1024.34 3290 1005 c
S
Q
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
