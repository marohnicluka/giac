%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 263 208
%%HiResBoundingBox: 0 0 263 208
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 263 208 re
W
q
q
[1 0 0 1 0 0] cm
q
[1 0 0 1 0 0] cm
0 0 263 208 re
W
q
[0.1 0 0 0.1 0 0] cm
{} settransfer
20 w
/DeviceRGB {} CS
[0 0 1] SC
1840 1970 m
780 1970 l
S
1840 1970 m
250 1050 l
S
1840 1970 m
2370 1050 l
S
1840 1970 m
1840 130 l
S
780 1970 m
250 1050 l
S
780 1970 m
2370 1050 l
S
780 1970 m
780 130 l
S
250 1050 m
1840 130 l
S
250 1050 m
780 130 l
S
2370 1050 m
1840 130 l
S
2370 1050 m
780 130 l
S
1840 130 m
780 130 l
S
q
1230 1370 1210 710 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
1870 1975 m
1870 1955.66 1854.34 1940 1835 1940 c
1815.66 1940 1800 1955.66 1800 1975 c
1800 1994.34 1815.66 2010 1835 2010 c
1854.34 2010 1870 1994.34 1870 1975 c
S
Q
q
170 1370 1210 710 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
810 1975 m
810 1955.66 794.34 1940 775 1940 c
755.66 1940 740 1955.66 740 1975 c
740 1994.34 755.66 2010 775 2010 c
794.34 2010 810 1994.34 810 1975 c
S
Q
40 w
/DeviceRGB {} CS
[1 1 0] SC
280 1055 m
280 1035.66 264.34 1020 245 1020 c
225.66 1020 210 1035.66 210 1055 c
210 1074.34 225.66 1090 245 1090 c
264.34 1090 280 1074.34 280 1055 c
S
2400 1055 m
2400 1035.66 2384.34 1020 2365 1020 c
2345.66 1020 2330 1035.66 2330 1055 c
2330 1074.34 2345.66 1090 2365 1090 c
2384.34 1090 2400 1074.34 2400 1055 c
S
q
1230 0 1210 740 re
W
1870 135 m
1870 115.66 1854.34 100 1835 100 c
1815.66 100 1800 115.66 1800 135 c
1800 154.34 1815.66 170 1835 170 c
1854.34 170 1870 154.34 1870 135 c
S
Q
q
170 0 1210 740 re
W
810 135 m
810 115.66 794.34 100 775 100 c
755.66 100 740 115.66 740 135 c
740 154.34 755.66 170 775 170 c
794.34 170 810 154.34 810 135 c
S
Q
10 w
/DeviceGray {} CS
[0] SC
1840 1970 m
1850 1970 l
S
/DeviceGray {} cs
[0] sc
1925.47 1960 m
1925.47 2073.44 l
1916.25 2073.44 l
1911.25 2055.94 1908.12 2053.59 1886.25 2050.94 c
1886.25 2040.78 l
1911.41 2040.78 l
1911.41 1960 l
1925.47 1960 l
f
1949.22 1994.53 71.5625 10.9375 re
f
2092.77 2040.16 m
2092.77 2059.38 2077.93 2073.44 2056.52 2073.44 c
2033.24 2073.44 2019.8 2061.56 2019.02 2034.06 c
2033.09 2034.06 l
2034.18 2053.12 2042.15 2061.09 2056.05 2061.09 c
2068.87 2061.09 2078.4 2052.03 2078.4 2039.84 c
2078.4 2030.94 2073.09 2023.12 2063.09 2017.5 c
2048.4 2009.06 l
2024.65 1995.62 2017.77 1985 2016.52 1960 c
2091.99 1960 l
2091.99 1973.91 l
2032.3 1973.91 l
2033.71 1983.12 2038.87 1989.06 2052.77 1997.34 c
2068.87 2005.94 l
2084.65 2014.38 2092.77 2026.25 2092.77 2040.16 c
f
780 1970 m
790 1970 l
S
575.469 1960 m
575.469 2073.44 l
566.25 2073.44 l
561.25 2055.94 558.121 2053.59 536.25 2050.94 c
536.25 2040.78 l
561.41 2040.78 l
561.41 1960 l
575.469 1960 l
f
599.219 1994.53 71.5625 10.9375 re
f
741.988 1992.97 m
741.988 2006.72 736.371 2014.69 722.77 2019.38 c
733.398 2023.59 738.711 2030.94 738.711 2042.19 c
738.711 2061.72 725.738 2073.44 704.02 2073.44 c
681.211 2073.44 669.02 2060.94 668.551 2036.88 c
682.621 2036.88 l
682.93 2053.59 689.801 2061.09 704.18 2061.09 c
716.68 2061.09 724.18 2053.75 724.18 2041.72 c
724.18 2029.53 719.02 2024.69 696.371 2024.69 c
696.371 2012.81 l
704.02 2012.81 l
719.648 2012.81 727.621 2005.47 727.621 1992.81 c
727.621 1978.59 718.871 1970.16 704.02 1970.16 c
688.711 1970.16 681.211 1977.81 680.27 1994.22 c
666.211 1994.22 l
667.93 1968.91 680.43 1957.66 703.551 1957.66 c
726.988 1957.66 741.988 1971.56 741.988 1992.97 c
f
250 1050 m
260 1050 l
S
45.4688 1040 m
45.4688 1153.44 l
36.25 1153.44 l
31.25 1135.94 28.1211 1133.59 6.25 1130.94 c
6.25 1120.78 l
31.4102 1120.78 l
31.4102 1040 l
45.4688 1040 l
f
69.2188 1074.53 71.5625 10.9375 re
f
214.18 1067.19 m
214.18 1079.84 l
197.461 1079.84 l
197.461 1153.44 l
186.988 1153.44 l
135.59 1082.03 l
135.59 1067.19 l
183.398 1067.19 l
183.398 1040 l
197.461 1040 l
197.461 1067.19 l
214.18 1067.19 l
h
183.398 1079.84 m
147.93 1079.84 l
183.398 1129.38 l
183.398 1079.84 l
h
f
2370 1050 m
2380 1050 l
S
2481.72 1010.16 m
2481.72 1029.38 2466.88 1043.44 2445.47 1043.44 c
2422.19 1043.44 2408.75 1031.56 2407.97 1004.06 c
2422.03 1004.06 l
2423.12 1023.12 2431.09 1031.09 2445 1031.09 c
2457.81 1031.09 2467.34 1022.03 2467.34 1009.84 c
2467.34 1000.94 2462.03 993.121 2452.03 987.5 c
2437.34 979.059 l
2413.59 965.621 2406.72 955 2405.47 930 c
2480.94 930 l
2480.94 943.91 l
2421.25 943.91 l
2422.66 953.121 2427.81 959.059 2441.72 967.34 c
2457.81 975.941 l
2473.59 984.379 2481.72 996.25 2481.72 1010.16 c
f
2479.22 964.531 71.5625 10.9375 re
f
2621.99 962.969 m
2621.99 976.719 2616.37 984.691 2602.77 989.379 c
2613.4 993.59 2618.71 1000.94 2618.71 1012.19 c
2618.71 1031.72 2605.74 1043.44 2584.02 1043.44 c
2561.21 1043.44 2549.02 1030.94 2548.55 1006.88 c
2562.62 1006.88 l
2562.93 1023.59 2569.8 1031.09 2584.18 1031.09 c
2596.68 1031.09 2604.18 1023.75 2604.18 1011.72 c
2604.18 999.531 2599.02 994.691 2576.37 994.691 c
2576.37 982.809 l
2584.02 982.809 l
2599.65 982.809 2607.62 975.469 2607.62 962.809 c
2607.62 948.59 2598.87 940.16 2584.02 940.16 c
2568.71 940.16 2561.21 947.809 2560.27 964.219 c
2546.21 964.219 l
2547.93 938.91 2560.43 927.66 2583.55 927.66 c
2606.99 927.66 2621.99 941.559 2621.99 962.969 c
f
1840 130 m
1850 130 l
S
1951.72 90.1602 m
1951.72 109.379 1936.88 123.441 1915.47 123.441 c
1892.19 123.441 1878.75 111.559 1877.97 84.0586 c
1892.03 84.0586 l
1893.12 103.121 1901.09 111.09 1915 111.09 c
1927.81 111.09 1937.34 102.031 1937.34 89.8398 c
1937.34 80.9414 1932.03 73.1211 1922.03 67.5 c
1907.34 59.0586 l
1883.59 45.6211 1876.72 35 1875.47 10 c
1950.94 10 l
1950.94 23.9102 l
1891.25 23.9102 l
1892.66 33.1211 1897.81 39.0586 1911.72 47.3398 c
1927.81 55.9414 l
1943.59 64.3789 1951.72 76.25 1951.72 90.1602 c
f
1949.22 44.5313 71.5625 10.9375 re
f
2094.18 37.1914 m
2094.18 49.8398 l
2077.46 49.8398 l
2077.46 123.441 l
2066.99 123.441 l
2015.59 52.0313 l
2015.59 37.1914 l
2063.4 37.1914 l
2063.4 10 l
2077.46 10 l
2077.46 37.1914 l
2094.18 37.1914 l
h
2063.4 49.8398 m
2027.93 49.8398 l
2063.4 99.3789 l
2063.4 49.8398 l
h
f
780 130 m
790 130 l
S
600.941 42.9688 m
600.941 56.7188 595.309 64.6914 581.719 69.3789 c
592.34 73.5898 597.66 80.9414 597.66 92.1914 c
597.66 111.719 584.691 123.441 562.969 123.441 c
540.16 123.441 527.969 110.941 527.5 86.8789 c
541.559 86.8789 l
541.879 103.59 548.75 111.09 563.121 111.09 c
575.621 111.09 583.121 103.75 583.121 91.7188 c
583.121 79.5313 577.969 74.6914 555.309 74.6914 c
555.309 62.8086 l
562.969 62.8086 l
578.59 62.8086 586.559 55.4688 586.559 42.8086 c
586.559 28.5898 577.809 20.1602 562.969 20.1602 c
547.66 20.1602 540.16 27.8086 539.219 44.2188 c
525.16 44.2188 l
526.879 18.9102 539.379 7.66016 562.5 7.66016 c
585.941 7.66016 600.941 21.5586 600.941 42.9688 c
f
599.219 44.5313 71.5625 10.9375 re
f
744.18 37.1914 m
744.18 49.8398 l
727.461 49.8398 l
727.461 123.441 l
716.988 123.441 l
665.59 52.0313 l
665.59 37.1914 l
713.398 37.1914 l
713.398 10 l
727.461 10 l
727.461 37.1914 l
744.18 37.1914 l
h
713.398 49.8398 m
677.93 49.8398 l
713.398 99.3789 l
713.398 49.8398 l
h
f
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
