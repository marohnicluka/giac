%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 357 197
%%HiResBoundingBox: 0 0 357 197
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 357 197 re
W
q
q
[1 0 0 1 -107 -45] cm
q
[1 0 0 1 0 0] cm
0 0 571 288 re
W
q
[0.1 0 0 0.1 0 0] cm
q
5 5 5700 2860 re
W
20 w
/DeviceRGB {} CS
[1 0 0] SC
1670 2350 m
4050 2350 l
S
/DeviceRGB {} CS
[0 0 1] SC
1670 2350 m
1140 1430 l
S
1670 2350 m
1730 1820 l
S
4050 2350 m
4580 1430 l
S
4050 2350 m
3990 1820 l
S
/DeviceRGB {} CS
[1 0 0] SC
4580 1430 m
4050 510 l
S
/DeviceRGB {} CS
[0 0 1] SC
4580 1430 m
4210 1430 l
S
4050 510 m
1670 510 l
S
4050 510 m
3990 1040 l
S
/DeviceRGB {} CS
[1 0 0] SC
1670 510 m
1140 1430 l
S
/DeviceRGB {} CS
[0 0 1] SC
1670 510 m
1730 1040 l
S
1140 1430 m
1510 1430 l
S
/DeviceRGB {} CS
[1 0 0] SC
1510 1430 m
2160 1610 l
S
/DeviceRGB {} CS
[0 0 1] SC
1510 1430 m
2160 1250 l
S
1730 1820 m
2160 1250 l
S
/DeviceRGB {} CS
[1 0 0] SC
1730 1820 m
1730 1040 l
S
/DeviceRGB {} CS
[0 0 1] SC
2160 1610 m
2860 2100 l
S
2160 1610 m
1730 1040 l
S
/DeviceRGB {} CS
[1 0 0] SC
2860 2100 m
3560 1610 l
S
/DeviceRGB {} CS
[0 0 1] SC
2860 2100 m
2860 760 l
S
3560 1610 m
4210 1430 l
S
3560 1610 m
3990 1040 l
S
/DeviceRGB {} CS
[1 0 0] SC
3990 1820 m
3990 1040 l
S
/DeviceRGB {} CS
[0 0 1] SC
3990 1820 m
3560 1250 l
S
/DeviceRGB {} CS
[1 0 0] SC
4210 1430 m
3560 1250 l
S
/DeviceRGB {} CS
[0 0 1] SC
3560 1250 m
2860 760 l
S
/DeviceRGB {} CS
[1 0 0] SC
2860 760 m
2160 1250 l
S
40 w
/DeviceRGB {} CS
[1 1 0] SC
1700 2355 m
1700 2335.66 1684.34 2320 1665 2320 c
1645.66 2320 1630 2335.66 1630 2355 c
1630 2374.34 1645.66 2390 1665 2390 c
1684.34 2390 1700 2374.34 1700 2355 c
S
4080 2355 m
4080 2335.66 4064.34 2320 4045 2320 c
4025.66 2320 4010 2335.66 4010 2355 c
4010 2374.34 4025.66 2390 4045 2390 c
4064.34 2390 4080 2374.34 4080 2355 c
S
4610 1435 m
4610 1415.66 4594.34 1400 4575 1400 c
4555.66 1400 4540 1415.66 4540 1435 c
4540 1454.34 4555.66 1470 4575 1470 c
4594.34 1470 4610 1454.34 4610 1435 c
S
4080 515 m
4080 495.66 4064.34 480 4045 480 c
4025.66 480 4010 495.66 4010 515 c
4010 534.34 4025.66 550 4045 550 c
4064.34 550 4080 534.34 4080 515 c
S
1700 515 m
1700 495.66 1684.34 480 1665 480 c
1645.66 480 1630 495.66 1630 515 c
1630 534.34 1645.66 550 1665 550 c
1684.34 550 1700 534.34 1700 515 c
S
1170 1435 m
1170 1415.66 1154.34 1400 1135 1400 c
1115.66 1400 1100 1415.66 1100 1435 c
1100 1454.34 1115.66 1470 1135 1470 c
1154.34 1470 1170 1454.34 1170 1435 c
S
1540 1435 m
1540 1415.66 1524.34 1400 1505 1400 c
1485.66 1400 1470 1415.66 1470 1435 c
1470 1454.34 1485.66 1470 1505 1470 c
1524.34 1470 1540 1454.34 1540 1435 c
S
1760 1825 m
1760 1805.66 1744.34 1790 1725 1790 c
1705.66 1790 1690 1805.66 1690 1825 c
1690 1844.34 1705.66 1860 1725 1860 c
1744.34 1860 1760 1844.34 1760 1825 c
S
2190 1615 m
2190 1595.66 2174.34 1580 2155 1580 c
2135.66 1580 2120 1595.66 2120 1615 c
2120 1634.34 2135.66 1650 2155 1650 c
2174.34 1650 2190 1634.34 2190 1615 c
S
2890 2105 m
2890 2085.66 2874.34 2070 2855 2070 c
2835.66 2070 2820 2085.66 2820 2105 c
2820 2124.34 2835.66 2140 2855 2140 c
2874.34 2140 2890 2124.34 2890 2105 c
S
3590 1615 m
3590 1595.66 3574.34 1580 3555 1580 c
3535.66 1580 3520 1595.66 3520 1615 c
3520 1634.34 3535.66 1650 3555 1650 c
3574.34 1650 3590 1634.34 3590 1615 c
S
4020 1825 m
4020 1805.66 4004.34 1790 3985 1790 c
3965.66 1790 3950 1805.66 3950 1825 c
3950 1844.34 3965.66 1860 3985 1860 c
4004.34 1860 4020 1844.34 4020 1825 c
S
4240 1435 m
4240 1415.66 4224.34 1400 4205 1400 c
4185.66 1400 4170 1415.66 4170 1435 c
4170 1454.34 4185.66 1470 4205 1470 c
4224.34 1470 4240 1454.34 4240 1435 c
S
4020 1045 m
4020 1025.66 4004.34 1010 3985 1010 c
3965.66 1010 3950 1025.66 3950 1045 c
3950 1064.34 3965.66 1080 3985 1080 c
4004.34 1080 4020 1064.34 4020 1045 c
S
3590 1255 m
3590 1235.66 3574.34 1220 3555 1220 c
3535.66 1220 3520 1235.66 3520 1255 c
3520 1274.34 3535.66 1290 3555 1290 c
3574.34 1290 3590 1274.34 3590 1255 c
S
2890 765 m
2890 745.66 2874.34 730 2855 730 c
2835.66 730 2820 745.66 2820 765 c
2820 784.34 2835.66 800 2855 800 c
2874.34 800 2890 784.34 2890 765 c
S
2190 1255 m
2190 1235.66 2174.34 1220 2155 1220 c
2135.66 1220 2120 1235.66 2120 1255 c
2120 1274.34 2135.66 1290 2155 1290 c
2174.34 1290 2190 1274.34 2190 1255 c
S
1760 1045 m
1760 1025.66 1744.34 1010 1725 1010 c
1705.66 1010 1690 1025.66 1690 1045 c
1690 1064.34 1705.66 1080 1725 1080 c
1744.34 1080 1760 1064.34 1760 1045 c
S
Q
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
