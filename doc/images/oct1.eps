%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 236 208
%%HiResBoundingBox: 0 0 236 208
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 236 208 re
W
q
q
[1 0 0 1 0 -38] cm
q
[1 0 0 1 0 0] cm
0 0 236 287 re
W
q
[0.1 0 0 0.1 0 0] cm
20 w
/DeviceRGB {} CS
[0 0 1] SC
1710 2350 m
1710 510 l
S
1710 2350 m
120 1430 l
S
1710 2350 m
2240 1430 l
S
1710 2350 m
650 2350 l
S
650 2350 m
2240 1430 l
S
650 2350 m
120 1430 l
S
650 2350 m
650 510 l
S
2240 1430 m
1710 510 l
S
2240 1430 m
650 510 l
S
120 1430 m
1710 510 l
S
120 1430 m
650 510 l
S
1710 510 m
650 510 l
S
q
1100 1750 1210 1115 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
1740 2355 m
1740 2335.66 1724.34 2320 1705 2320 c
1685.66 2320 1670 2335.66 1670 2355 c
1670 2374.34 1685.66 2390 1705 2390 c
1724.34 2390 1740 2374.34 1740 2355 c
S
Q
q
40 1750 1210 1115 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
680 2355 m
680 2335.66 664.34 2320 645 2320 c
625.66 2320 610 2335.66 610 2355 c
610 2374.34 625.66 2390 645 2390 c
664.34 2390 680 2374.34 680 2355 c
S
Q
40 w
/DeviceRGB {} CS
[1 1 0] SC
2270 1435 m
2270 1415.66 2254.34 1400 2235 1400 c
2215.66 1400 2200 1415.66 2200 1435 c
2200 1454.34 2215.66 1470 2235 1470 c
2254.34 1470 2270 1454.34 2270 1435 c
S
150 1435 m
150 1415.66 134.34 1400 115 1400 c
95.6602 1400 80 1415.66 80 1435 c
80 1454.34 95.6602 1470 115 1470 c
134.34 1470 150 1454.34 150 1435 c
S
q
1100 5 1210 1115 re
W
1740 515 m
1740 495.66 1724.34 480 1705 480 c
1685.66 480 1670 495.66 1670 515 c
1670 534.34 1685.66 550 1705 550 c
1724.34 550 1740 534.34 1740 515 c
S
Q
q
40 5 1210 1115 re
W
680 515 m
680 495.66 664.34 480 645 480 c
625.66 480 610 495.66 610 515 c
610 534.34 625.66 550 645 550 c
664.34 550 680 534.34 680 515 c
S
Q
10 w
/DeviceGray {} CS
[0] SC
1710 2350 m
1720 2350 l
S
/DeviceGray {} cs
[0] sc
1781.41 2420.78 m
1781.41 2340 l
1795.47 2340 l
1795.47 2453.44 l
1786.25 2453.44 l
1781.25 2435.94 1778.12 2433.59 1756.25 2430.94 c
1756.25 2420.78 l
1781.41 2420.78 l
h
f
650 2350 m
660 2350 l
S
565.309 2392.03 m
567.191 2392.03 l
572.969 2392.19 l
588.59 2392.19 596.559 2385.16 596.559 2371.56 c
596.559 2357.34 587.809 2348.75 572.969 2348.75 c
557.66 2348.75 550.16 2356.41 549.219 2372.97 c
535.16 2372.97 l
535.781 2363.91 537.34 2357.97 540.16 2352.81 c
545.781 2341.88 557.031 2336.25 572.5 2336.25 c
595.941 2336.25 610.941 2350.31 610.941 2371.72 c
610.941 2386.09 605.309 2394.06 591.719 2398.75 c
602.34 2402.97 607.66 2410.94 607.66 2422.19 c
607.66 2441.72 594.691 2453.44 572.969 2453.44 c
550.16 2453.44 537.969 2440.94 537.5 2416.88 c
551.559 2416.88 l
551.719 2423.75 552.34 2427.5 554.219 2431.09 c
557.34 2437.34 564.379 2441.09 573.121 2441.09 c
585.621 2441.09 593.121 2433.91 593.121 2421.72 c
593.121 2413.75 590.309 2408.91 584.059 2406.41 c
580.309 2404.84 575.309 2404.22 565.309 2404.06 c
565.309 2392.03 l
h
f
2240 1430 m
2250 1430 l
S
2349.69 1393.91 m
2347.03 1412.34 2334.84 1423.44 2317.5 1423.44 c
2305 1423.44 2293.91 1417.5 2287.19 1407.34 c
2280.16 1396.25 2276.88 1382.34 2276.88 1361.72 c
2276.88 1342.5 2279.69 1330.47 2286.41 1320.47 c
2292.5 1311.25 2302.5 1306.25 2315 1306.25 c
2336.56 1306.25 2352.03 1322.34 2352.03 1344.53 c
2352.03 1365.62 2337.66 1380.62 2317.34 1380.62 c
2306.09 1380.62 2297.34 1376.25 2291.25 1367.97 c
2291.41 1395.62 2300.47 1410.94 2316.56 1410.94 c
2326.41 1410.94 2333.44 1404.69 2335.62 1393.91 c
2349.69 1393.91 l
h
2315.62 1368.12 m
2329.22 1368.12 2337.66 1358.59 2337.66 1343.44 c
2337.66 1329.22 2328.12 1318.75 2315.16 1318.75 c
2302.03 1318.75 2292.03 1329.69 2292.03 1344.22 c
2292.03 1358.28 2301.72 1368.12 2315.62 1368.12 c
h
f
120 1430 m
130 1430 l
S
76.0898 1533.44 m
17.6602 1533.44 l
9.05859 1471.72 l
22.0313 1471.72 l
28.5898 1479.53 34.0586 1482.19 42.9688 1482.19 c
58.2813 1482.19 67.6602 1471.88 67.6602 1455 c
67.6602 1438.75 58.2813 1428.75 42.8086 1428.75 c
30.6211 1428.75 22.9688 1435 19.6914 1447.81 c
5.62109 1447.81 l
7.5 1438.59 9.05859 1434.06 12.5 1429.84 c
18.9102 1421.25 30.4688 1416.25 43.1211 1416.25 c
66.0898 1416.25 82.0313 1432.97 82.0313 1457.03 c
82.0313 1479.38 67.1914 1494.69 45.4688 1494.69 c
37.5 1494.69 31.0898 1492.66 24.5313 1487.81 c
28.9102 1519.53 l
76.0898 1519.53 l
76.0898 1533.44 l
h
f
1710 510 m
1720 510 l
S
1792.34 417.191 m
1792.34 390 l
1806.41 390 l
1806.41 417.191 l
1823.12 417.191 l
1823.12 429.84 l
1806.41 429.84 l
1806.41 503.441 l
1795.94 503.441 l
1744.53 432.031 l
1744.53 417.191 l
1792.34 417.191 l
h
1792.34 429.84 m
1756.88 429.84 l
1792.34 479.379 l
1792.34 429.84 l
h
f
650 510 m
660 510 l
S
610.941 403.91 m
551.25 403.91 l
552.66 413.121 557.809 419.059 571.719 427.34 c
587.809 435.941 l
603.59 444.531 611.719 456.25 611.719 470.16 c
611.719 479.531 607.969 488.441 601.25 494.691 c
594.531 500.621 586.25 503.441 575.469 503.441 c
561.09 503.441 550.309 498.441 544.059 488.75 c
540.16 482.66 538.281 475.621 537.969 464.059 c
552.031 464.059 l
552.5 471.719 553.59 476.41 555.469 480.16 c
559.059 487.031 566.41 491.09 575 491.09 c
587.809 491.09 597.34 482.031 597.34 469.84 c
597.34 460.941 592.031 453.121 582.031 447.5 c
567.34 439.059 l
543.59 425.621 536.719 415 535.469 390 c
610.941 390 l
610.941 403.91 l
h
f
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
