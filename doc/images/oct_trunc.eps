%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 225 197
%%HiResBoundingBox: 0 0 225 197
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 225 197 re
W
q
q
[1 0 0 1 0 0] cm
q
[1 0 0 1 0 0] cm
0 0 225 197 re
W
q
[0.1 0 0 0.1 0 0] cm
{} settransfer
20 w
/DeviceRGB {} CS
[0 0 1] SC
1730 820 m
2190 940 l
S
1730 820 m
1450 1010 l
S
1730 820 m
1560 520 l
S
2190 940 m
1690 60 l
S
2190 940 m
1640 1900 l
S
1690 60 m
1560 520 l
S
1690 60 m
570 60 l
S
1560 520 m
1250 670 l
S
1250 670 m
1200 820 l
S
1250 670 m
1010 670 l
S
1200 820 m
1060 820 l
S
1200 820 m
1290 980 l
S
1060 820 m
1010 670 l
S
1060 820 m
970 980 l
S
1010 670 m
700 520 l
S
700 520 m
570 60 l
S
700 520 m
530 820 l
S
570 60 m
70 940 l
S
70 940 m
530 820 l
S
70 940 m
620 1900 l
S
530 820 m
810 1010 l
S
810 1010 m
970 980 l
S
810 1010 m
940 1220 l
S
970 980 m
1040 1100 l
S
1040 1100 m
940 1220 l
S
1040 1100 m
1220 1100 l
S
940 1220 m
960 1560 l
S
960 1560 m
620 1900 l
S
960 1560 m
1310 1560 l
S
620 1900 m
1640 1900 l
S
1640 1900 m
1310 1560 l
S
1310 1560 m
1320 1220 l
S
1320 1220 m
1220 1100 l
S
1320 1220 m
1450 1010 l
S
1220 1100 m
1290 980 l
S
1290 980 m
1450 1010 l
S
40 w
/DeviceRGB {} CS
[1 1 0] SC
1760 825 m
1760 805.66 1744.34 790 1725 790 c
1705.66 790 1690 805.66 1690 825 c
1690 844.34 1705.66 860 1725 860 c
1744.34 860 1760 844.34 1760 825 c
S
2220 945 m
2220 925.66 2204.34 910 2185 910 c
2165.66 910 2150 925.66 2150 945 c
2150 964.34 2165.66 980 2185 980 c
2204.34 980 2220 964.34 2220 945 c
S
q
1080 0 1170 670 re
W
1720 65 m
1720 45.6602 1704.34 30 1685 30 c
1665.66 30 1650 45.6602 1650 65 c
1650 84.3398 1665.66 100 1685 100 c
1704.34 100 1720 84.3398 1720 65 c
S
1590 525 m
1590 505.66 1574.34 490 1555 490 c
1535.66 490 1520 505.66 1520 525 c
1520 544.34 1535.66 560 1555 560 c
1574.34 560 1590 544.34 1590 525 c
S
Q
1280 675 m
1280 655.66 1264.34 640 1245 640 c
1225.66 640 1210 655.66 1210 675 c
1210 694.34 1225.66 710 1245 710 c
1264.34 710 1280 694.34 1280 675 c
S
1230 825 m
1230 805.66 1214.34 790 1195 790 c
1175.66 790 1160 805.66 1160 825 c
1160 844.34 1175.66 860 1195 860 c
1214.34 860 1230 844.34 1230 825 c
S
1090 825 m
1090 805.66 1074.34 790 1055 790 c
1035.66 790 1020 805.66 1020 825 c
1020 844.34 1035.66 860 1055 860 c
1074.34 860 1090 844.34 1090 825 c
S
1040 675 m
1040 655.66 1024.34 640 1005 640 c
985.66 640 970 655.66 970 675 c
970 694.34 985.66 710 1005 710 c
1024.34 710 1040 694.34 1040 675 c
S
730 525 m
730 505.66 714.34 490 695 490 c
675.66 490 660 505.66 660 525 c
660 544.34 675.66 560 695 560 c
714.34 560 730 544.34 730 525 c
S
q
0 0 1170 670 re
W
600 65 m
600 45.6602 584.34 30 565 30 c
545.66 30 530 45.6602 530 65 c
530 84.3398 545.66 100 565 100 c
584.34 100 600 84.3398 600 65 c
S
Q
100 945 m
100 925.66 84.3398 910 65 910 c
45.6602 910 30 925.66 30 945 c
30 964.34 45.6602 980 65 980 c
84.3398 980 100 964.34 100 945 c
S
560 825 m
560 805.66 544.34 790 525 790 c
505.66 790 490 805.66 490 825 c
490 844.34 505.66 860 525 860 c
544.34 860 560 844.34 560 825 c
S
840 1015 m
840 995.66 824.34 980 805 980 c
785.66 980 770 995.66 770 1015 c
770 1034.34 785.66 1050 805 1050 c
824.34 1050 840 1034.34 840 1015 c
S
1000 985 m
1000 965.66 984.34 950 965 950 c
945.66 950 930 965.66 930 985 c
930 1004.34 945.66 1020 965 1020 c
984.34 1020 1000 1004.34 1000 985 c
S
1070 1105 m
1070 1085.66 1054.34 1070 1035 1070 c
1015.66 1070 1000 1085.66 1000 1105 c
1000 1124.34 1015.66 1140 1035 1140 c
1054.34 1140 1070 1124.34 1070 1105 c
S
970 1225 m
970 1205.66 954.34 1190 935 1190 c
915.66 1190 900 1205.66 900 1225 c
900 1244.34 915.66 1260 935 1260 c
954.34 1260 970 1244.34 970 1225 c
S
990 1565 m
990 1545.66 974.34 1530 955 1530 c
935.66 1530 920 1545.66 920 1565 c
920 1584.34 935.66 1600 955 1600 c
974.34 1600 990 1584.34 990 1565 c
S
q
10 1300 1210 670 re
W
650 1905 m
650 1885.66 634.34 1870 615 1870 c
595.66 1870 580 1885.66 580 1905 c
580 1924.34 595.66 1940 615 1940 c
634.34 1940 650 1924.34 650 1905 c
S
Q
q
1030 1300 1210 670 re
W
1670 1905 m
1670 1885.66 1654.34 1870 1635 1870 c
1615.66 1870 1600 1885.66 1600 1905 c
1600 1924.34 1615.66 1940 1635 1940 c
1654.34 1940 1670 1924.34 1670 1905 c
S
1340 1565 m
1340 1545.66 1324.34 1530 1305 1530 c
1285.66 1530 1270 1545.66 1270 1565 c
1270 1584.34 1285.66 1600 1305 1600 c
1324.34 1600 1340 1584.34 1340 1565 c
S
Q
1350 1225 m
1350 1205.66 1334.34 1190 1315 1190 c
1295.66 1190 1280 1205.66 1280 1225 c
1280 1244.34 1295.66 1260 1315 1260 c
1334.34 1260 1350 1244.34 1350 1225 c
S
1250 1105 m
1250 1085.66 1234.34 1070 1215 1070 c
1195.66 1070 1180 1085.66 1180 1105 c
1180 1124.34 1195.66 1140 1215 1140 c
1234.34 1140 1250 1124.34 1250 1105 c
S
1320 985 m
1320 965.66 1304.34 950 1285 950 c
1265.66 950 1250 965.66 1250 985 c
1250 1004.34 1265.66 1020 1285 1020 c
1304.34 1020 1320 1004.34 1320 985 c
S
1480 1015 m
1480 995.66 1464.34 980 1445 980 c
1425.66 980 1410 995.66 1410 1015 c
1410 1034.34 1425.66 1050 1445 1050 c
1464.34 1050 1480 1034.34 1480 1015 c
S
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
