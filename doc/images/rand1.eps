%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 203 197
%%HiResBoundingBox: 0 0 203 197
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 203 197 re
W
q
q
[1 0 0 1 -37 -45] cm
q
[1 0 0 1 0 0] cm
0 0 239 287 re
W
q
[0.1 0 0 0.1 0 0] cm
20 w
/DeviceRGB {} CS
[0 0 1] SC
570 1800 m
490 1390 l
S
570 1800 m
860 1460 l
S
570 1800 m
910 2200 l
S
2140 1040 m
1910 680 l
S
2140 1040 m
1990 1520 l
S
2140 1040 m
2340 1390 l
S
2140 1040 m
1740 950 l
S
2080 2020 m
2300 1730 l
S
2080 2020 m
1990 1520 l
S
2080 2020 m
1620 2310 l
S
1500 590 m
1180 940 l
S
1500 590 m
1910 680 l
S
1500 590 m
1050 510 l
S
1500 590 m
1740 950 l
S
1180 940 m
740 1200 l
S
1180 940 m
860 1460 l
S
1620 2310 m
1240 2350 l
S
1620 2310 m
1320 1970 l
S
610 590 m
440 1000 l
S
610 590 m
1050 510 l
S
910 2200 m
1240 2350 l
S
910 2200 m
1320 1970 l
S
740 1200 m
490 1390 l
S
2300 1730 m
2340 1390 l
S
440 1000 m
490 1390 l
S
40 w
/DeviceRGB {} CS
[1 1 0] SC
600 1805 m
600 1785.66 584.34 1770 565 1770 c
545.66 1770 530 1785.66 530 1805 c
530 1824.34 545.66 1840 565 1840 c
584.34 1840 600 1824.34 600 1805 c
S
2170 1045 m
2170 1025.66 2154.34 1010 2135 1010 c
2115.66 1010 2100 1025.66 2100 1045 c
2100 1064.34 2115.66 1080 2135 1080 c
2154.34 1080 2170 1064.34 2170 1045 c
S
2110 2025 m
2110 2005.66 2094.34 1990 2075 1990 c
2055.66 1990 2040 2005.66 2040 2025 c
2040 2044.34 2055.66 2060 2075 2060 c
2094.34 2060 2110 2044.34 2110 2025 c
S
q
890 5 1210 1195 re
W
1530 595 m
1530 575.66 1514.34 560 1495 560 c
1475.66 560 1460 575.66 1460 595 c
1460 614.34 1475.66 630 1495 630 c
1514.34 630 1530 614.34 1530 595 c
S
Q
q
890 5 1210 1195 re
W
1210 945 m
1210 925.66 1194.34 910 1175 910 c
1155.66 910 1140 925.66 1140 945 c
1140 964.34 1155.66 980 1175 980 c
1194.34 980 1210 964.34 1210 945 c
S
Q
q
1010 1710 1210 1155 re
W
1650 2315 m
1650 2295.66 1634.34 2280 1615 2280 c
1595.66 2280 1580 2295.66 1580 2315 c
1580 2334.34 1595.66 2350 1615 2350 c
1634.34 2350 1650 2334.34 1650 2315 c
S
Q
q
0 5 1210 1195 re
W
640 595 m
640 575.66 624.34 560 605 560 c
585.66 560 570 575.66 570 595 c
570 614.34 585.66 630 605 630 c
624.34 630 640 614.34 640 595 c
S
Q
940 2205 m
940 2185.66 924.34 2170 905 2170 c
885.66 2170 870 2185.66 870 2205 c
870 2224.34 885.66 2240 905 2240 c
924.34 2240 940 2224.34 940 2205 c
S
770 1205 m
770 1185.66 754.34 1170 735 1170 c
715.66 1170 700 1185.66 700 1205 c
700 1224.34 715.66 1240 735 1240 c
754.34 1240 770 1224.34 770 1205 c
S
2330 1735 m
2330 1715.66 2314.34 1700 2295 1700 c
2275.66 1700 2260 1715.66 2260 1735 c
2260 1754.34 2275.66 1770 2295 1770 c
2314.34 1770 2330 1754.34 2330 1735 c
S
1940 685 m
1940 665.66 1924.34 650 1905 650 c
1885.66 650 1870 665.66 1870 685 c
1870 704.34 1885.66 720 1905 720 c
1924.34 720 1940 704.34 1940 685 c
S
470 1005 m
470 985.66 454.34 970 435 970 c
415.66 970 400 985.66 400 1005 c
400 1024.34 415.66 1040 435 1040 c
454.34 1040 470 1024.34 470 1005 c
S
2020 1525 m
2020 1505.66 2004.34 1490 1985 1490 c
1965.66 1490 1950 1505.66 1950 1525 c
1950 1544.34 1965.66 1560 1985 1560 c
2004.34 1560 2020 1544.34 2020 1525 c
S
2370 1395 m
2370 1375.66 2354.34 1360 2335 1360 c
2315.66 1360 2300 1375.66 2300 1395 c
2300 1414.34 2315.66 1430 2335 1430 c
2354.34 1430 2370 1414.34 2370 1395 c
S
q
440 5 1210 1115 re
W
1080 515 m
1080 495.66 1064.34 480 1045 480 c
1025.66 480 1010 495.66 1010 515 c
1010 534.34 1025.66 550 1045 550 c
1064.34 550 1080 534.34 1080 515 c
S
Q
q
630 1750 1210 1115 re
W
1270 2355 m
1270 2335.66 1254.34 2320 1235 2320 c
1215.66 2320 1200 2335.66 1200 2355 c
1200 2374.34 1215.66 2390 1235 2390 c
1254.34 2390 1270 2374.34 1270 2355 c
S
Q
q
630 1750 1210 1115 re
W
1350 1975 m
1350 1955.66 1334.34 1940 1315 1940 c
1295.66 1940 1280 1955.66 1280 1975 c
1280 1994.34 1295.66 2010 1315 2010 c
1334.34 2010 1350 1994.34 1350 1975 c
S
Q
520 1395 m
520 1375.66 504.34 1360 485 1360 c
465.66 1360 450 1375.66 450 1395 c
450 1414.34 465.66 1430 485 1430 c
504.34 1430 520 1414.34 520 1395 c
S
1770 955 m
1770 935.66 1754.34 920 1735 920 c
1715.66 920 1700 935.66 1700 955 c
1700 974.34 1715.66 990 1735 990 c
1754.34 990 1770 974.34 1770 955 c
S
890 1465 m
890 1445.66 874.34 1430 855 1430 c
835.66 1430 820 1445.66 820 1465 c
820 1484.34 835.66 1500 855 1500 c
874.34 1500 890 1484.34 890 1465 c
S
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
