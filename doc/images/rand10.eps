%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 377 273
%%HiResBoundingBox: 0 0 377 273
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 377 273 re
W
q
q
[1 0 0 1 -97 -7] cm
q
[1 0 0 1 0 0] cm
0 0 571 288 re
W
q
[0.1 0 0 0.1 0 0] cm
q
5 5 5700 2860 re
W
20 w
/DeviceRGB {} CS
[0 0 1] SC
3050 1940 m
2970 1700 l
S
/DeviceRGB {} cs
[0 0 1] sc
2970 1700 m
3020 1740 l
2960 1750 l
f
2970 1700 m
2900 1450 l
S
3050 1940 m
3290 2280 l
S
3290 2280 m
3190 2240 l
3280 2180 l
f
3290 2280 m
3600 2730 l
S
3050 1940 m
3260 1720 l
S
3260 1720 m
3240 1780 l
3200 1740 l
f
3260 1720 m
3530 1430 l
S
2310 1240 m
2630 1540 l
S
2630 1540 m
2530 1510 l
2600 1440 l
f
2630 1540 m
3050 1940 l
S
2310 1240 m
2160 1060 l
S
2160 1060 m
2220 1080 l
2170 1120 l
f
2160 1060 m
1970 820 l
S
2310 1240 m
2660 1290 l
S
2660 1290 m
2590 1320 l
2600 1240 l
f
2660 1290 m
3530 1430 l
S
2310 1240 m
2060 590 l
S
2060 590 m
2150 670 l
2040 710 l
f
2060 590 m
1920 230 l
S
2900 1450 m
3000 1150 l
S
3000 1150 m
3010 1230 l
2940 1200 l
f
3000 1150 m
3120 770 l
S
2900 1450 m
3220 1440 l
S
3220 1440 m
3160 1480 l
3150 1400 l
f
3220 1440 m
3530 1430 l
S
3120 770 m
3100 1100 l
S
3100 1100 m
3060 1030 l
3140 1040 l
f
3100 1100 m
3050 1940 l
S
3120 770 m
3470 870 l
S
3470 870 m
3390 890 l
3410 810 l
f
3470 870 m
4110 1050 l
S
3600 2730 m
3160 2470 l
S
3160 2470 m
3280 2470 l
3220 2580 l
f
3160 2470 m
2590 2130 l
S
1970 820 m
1570 520 l
S
1570 520 m
1670 530 l
1610 610 l
f
1570 520 m
1040 130 l
S
1970 820 m
2770 410 l
S
2770 410 m
2700 510 l
2650 400 l
f
2770 410 m
3260 160 l
S
2590 2130 m
2790 2050 l
S
2790 2050 m
2750 2100 l
2730 2040 l
f
2790 2050 m
3050 1940 l
S
2590 2130 m
3020 2390 l
S
3020 2390 m
2900 2380 l
2960 2280 l
f
3020 2390 m
3600 2730 l
S
2590 2130 m
2320 1570 l
S
2320 1570 m
2420 1640 l
2310 1690 l
f
2320 1570 m
1970 820 l
S
4110 1050 m
3860 1210 l
S
3860 1210 m
3890 1160 l
3920 1210 l
f
3860 1210 m
3530 1430 l
S
4110 1050 m
4360 1590 l
S
4360 1590 m
4260 1520 l
4370 1470 l
f
4360 1590 m
4610 2130 l
S
4110 1050 m
3560 470 l
S
3560 470 m
3670 500 l
3580 590 l
f
3560 470 m
3260 160 l
S
4110 1050 m
4360 1140 l
S
4360 1140 m
4300 1150 l
4320 1100 l
f
4360 1140 m
4680 1260 l
S
3530 1430 m
3260 1620 l
S
3260 1620 m
3290 1550 l
3340 1610 l
f
3260 1620 m
2590 2130 l
S
3530 1430 m
3780 1270 l
S
3780 1270 m
3750 1320 l
3720 1270 l
f
3780 1270 m
4110 1050 l
S
3530 1430 m
3670 1160 l
S
3670 1160 m
3670 1240 l
3600 1200 l
f
3670 1160 m
4040 480 l
S
3530 1430 m
3910 1370 l
S
3910 1370 m
3840 1420 l
3830 1340 l
f
3910 1370 m
4680 1260 l
S
1920 230 m
2270 390 l
S
2270 390 m
2190 400 l
2230 330 l
f
2270 390 m
3120 770 l
S
1920 230 m
1540 190 l
S
1540 190 m
1610 160 l
1610 230 l
f
1540 190 m
1040 130 l
S
4040 480 m
3500 650 l
S
3500 650 m
3580 560 l
3620 670 l
f
3500 650 m
3120 770 l
S
4040 480 m
3710 1090 l
S
3710 1090 m
3710 970 l
3810 1030 l
f
3710 1090 m
3530 1430 l
S
4610 2130 m
4180 2390 l
S
4180 2390 m
4230 2280 l
4300 2380 l
f
4180 2390 m
3600 2730 l
S
3260 160 m
3600 290 l
S
3600 290 m
3520 310 l
3550 230 l
f
3600 290 m
4040 480 l
S
4680 1260 m
4410 930 l
S
4410 930 m
4500 960 l
4430 1030 l
f
4410 930 m
4040 480 l
S
4680 1260 m
4650 1630 l
S
4650 1630 m
4620 1560 l
4700 1570 l
f
4650 1630 m
4610 2130 l
S
40 w
/DeviceRGB {} CS
[1 1 0] SC
3080 1945 m
3080 1925.66 3064.34 1910 3045 1910 c
3025.66 1910 3010 1925.66 3010 1945 c
3010 1964.34 3025.66 1980 3045 1980 c
3064.34 1980 3080 1964.34 3080 1945 c
S
2340 1245 m
2340 1225.66 2324.34 1210 2305 1210 c
2285.66 1210 2270 1225.66 2270 1245 c
2270 1264.34 2285.66 1280 2305 1280 c
2324.34 1280 2340 1264.34 2340 1245 c
S
2930 1455 m
2930 1435.66 2914.34 1420 2895 1420 c
2875.66 1420 2860 1435.66 2860 1455 c
2860 1474.34 2875.66 1490 2895 1490 c
2914.34 1490 2930 1474.34 2930 1455 c
S
3150 775 m
3150 755.66 3134.34 740 3115 740 c
3095.66 740 3080 755.66 3080 775 c
3080 794.34 3095.66 810 3115 810 c
3134.34 810 3150 794.34 3150 775 c
S
3630 2735 m
3630 2715.66 3614.34 2700 3595 2700 c
3575.66 2700 3560 2715.66 3560 2735 c
3560 2754.34 3575.66 2770 3595 2770 c
3614.34 2770 3630 2754.34 3630 2735 c
S
2000 825 m
2000 805.66 1984.34 790 1965 790 c
1945.66 790 1930 805.66 1930 825 c
1930 844.34 1945.66 860 1965 860 c
1984.34 860 2000 844.34 2000 825 c
S
2620 2135 m
2620 2115.66 2604.34 2100 2585 2100 c
2565.66 2100 2550 2115.66 2550 2135 c
2550 2154.34 2565.66 2170 2585 2170 c
2604.34 2170 2620 2154.34 2620 2135 c
S
4140 1055 m
4140 1035.66 4124.34 1020 4105 1020 c
4085.66 1020 4070 1035.66 4070 1055 c
4070 1074.34 4085.66 1090 4105 1090 c
4124.34 1090 4140 1074.34 4140 1055 c
S
3560 1435 m
3560 1415.66 3544.34 1400 3525 1400 c
3505.66 1400 3490 1415.66 3490 1435 c
3490 1454.34 3505.66 1470 3525 1470 c
3544.34 1470 3560 1454.34 3560 1435 c
S
1070 135 m
1070 115.66 1054.34 100 1035 100 c
1015.66 100 1000 115.66 1000 135 c
1000 154.34 1015.66 170 1035 170 c
1054.34 170 1070 154.34 1070 135 c
S
1950 235 m
1950 215.66 1934.34 200 1915 200 c
1895.66 200 1880 215.66 1880 235 c
1880 254.34 1895.66 270 1915 270 c
1934.34 270 1950 254.34 1950 235 c
S
4070 485 m
4070 465.66 4054.34 450 4035 450 c
4015.66 450 4000 465.66 4000 485 c
4000 504.34 4015.66 520 4035 520 c
4054.34 520 4070 504.34 4070 485 c
S
4640 2135 m
4640 2115.66 4624.34 2100 4605 2100 c
4585.66 2100 4570 2115.66 4570 2135 c
4570 2154.34 4585.66 2170 4605 2170 c
4624.34 2170 4640 2154.34 4640 2135 c
S
3290 165 m
3290 145.66 3274.34 130 3255 130 c
3235.66 130 3220 145.66 3220 165 c
3220 184.34 3235.66 200 3255 200 c
3274.34 200 3290 184.34 3290 165 c
S
4710 1265 m
4710 1245.66 4694.34 1230 4675 1230 c
4655.66 1230 4640 1245.66 4640 1265 c
4640 1284.34 4655.66 1300 4675 1300 c
4694.34 1300 4710 1284.34 4710 1265 c
S
Q
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
