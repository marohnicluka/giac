%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 313 197
%%HiResBoundingBox: 0 0 313 197
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 313 197 re
W
q
q
[1 0 0 1 -54 -45] cm
q
[1 0 0 1 0 0] cm
0 0 421 287 re
W
q
[0.1 0 0 0.1 0 0] cm
20 w
/DeviceRGB {} CS
[0 0 1] SC
610 1380 m
1040 950 l
S
2320 610 m
2330 820 l
S
2210 1870 m
1820 1650 l
S
2210 1870 m
2210 2320 l
S
2210 1870 m
2600 1650 l
S
1040 950 m
1480 1380 l
S
1040 950 m
1470 510 l
S
1040 950 m
610 510 l
S
760 2270 m
610 1720 l
S
2330 820 m
2300 1100 l
S
2330 820 m
2690 730 l
S
2330 820 m
2160 700 l
S
2330 820 m
2040 870 l
S
1820 900 m
2040 870 l
S
2930 1650 m
3490 2010 l
S
2300 1100 m
2260 1320 l
S
2960 830 m
2690 730 l
S
2960 830 m
3170 900 l
S
3270 2350 m
2930 2340 l
S
3270 2350 m
3610 2340 l
S
2690 730 m
2870 620 l
S
2690 730 m
2720 510 l
S
1420 1720 m
1100 2270 l
S
40 w
/DeviceRGB {} CS
[1 1 0] SC
640 1385 m
640 1365.66 624.34 1350 605 1350 c
585.66 1350 570 1365.66 570 1385 c
570 1404.34 585.66 1420 605 1420 c
624.34 1420 640 1404.34 640 1385 c
S
2350 615 m
2350 595.66 2334.34 580 2315 580 c
2295.66 580 2280 595.66 2280 615 c
2280 634.34 2295.66 650 2315 650 c
2334.34 650 2350 634.34 2350 615 c
S
2240 1875 m
2240 1855.66 2224.34 1840 2205 1840 c
2185.66 1840 2170 1855.66 2170 1875 c
2170 1894.34 2185.66 1910 2205 1910 c
2224.34 1910 2240 1894.34 2240 1875 c
S
1070 955 m
1070 935.66 1054.34 920 1035 920 c
1015.66 920 1000 935.66 1000 955 c
1000 974.34 1015.66 990 1035 990 c
1054.34 990 1070 974.34 1070 955 c
S
q
150 1670 1210 1195 re
W
790 2275 m
790 2255.66 774.34 2240 755 2240 c
735.66 2240 720 2255.66 720 2275 c
720 2294.34 735.66 2310 755 2310 c
774.34 2310 790 2294.34 790 2275 c
S
Q
2360 825 m
2360 805.66 2344.34 790 2325 790 c
2305.66 790 2290 805.66 2290 825 c
2290 844.34 2305.66 860 2325 860 c
2344.34 860 2360 844.34 2360 825 c
S
1850 905 m
1850 885.66 1834.34 870 1815 870 c
1795.66 870 1780 885.66 1780 905 c
1780 924.34 1795.66 940 1815 940 c
1834.34 940 1850 924.34 1850 905 c
S
1510 1385 m
1510 1365.66 1494.34 1350 1475 1350 c
1455.66 1350 1440 1365.66 1440 1385 c
1440 1404.34 1455.66 1420 1475 1420 c
1494.34 1420 1510 1404.34 1510 1385 c
S
2960 1655 m
2960 1635.66 2944.34 1620 2925 1620 c
2905.66 1620 2890 1635.66 2890 1655 c
2890 1674.34 2905.66 1690 2925 1690 c
2944.34 1690 2960 1674.34 2960 1655 c
S
2330 1105 m
2330 1085.66 2314.34 1070 2295 1070 c
2275.66 1070 2260 1085.66 2260 1105 c
2260 1124.34 2275.66 1140 2295 1140 c
2314.34 1140 2330 1124.34 2330 1105 c
S
2990 835 m
2990 815.66 2974.34 800 2955 800 c
2935.66 800 2920 815.66 2920 835 c
2920 854.34 2935.66 870 2955 870 c
2974.34 870 2990 854.34 2990 835 c
S
q
2660 1750 1210 1115 re
W
3300 2355 m
3300 2335.66 3284.34 2320 3265 2320 c
3245.66 2320 3230 2335.66 3230 2355 c
3230 2374.34 3245.66 2390 3265 2390 c
3284.34 2390 3300 2374.34 3300 2355 c
S
Q
q
2660 1750 1210 1115 re
W
3520 2015 m
3520 1995.66 3504.34 1980 3485 1980 c
3465.66 1980 3450 1995.66 3450 2015 c
3450 2034.34 3465.66 2050 3485 2050 c
3504.34 2050 3520 2034.34 3520 2015 c
S
Q
q
2320 1740 1210 1125 re
W
2960 2345 m
2960 2325.66 2944.34 2310 2925 2310 c
2905.66 2310 2890 2325.66 2890 2345 c
2890 2364.34 2905.66 2380 2925 2380 c
2944.34 2380 2960 2364.34 2960 2345 c
S
Q
q
3000 1740 1210 1125 re
W
3640 2345 m
3640 2325.66 3624.34 2310 3605 2310 c
3585.66 2310 3570 2325.66 3570 2345 c
3570 2364.34 3585.66 2380 3605 2380 c
3624.34 2380 3640 2364.34 3640 2345 c
S
Q
q
860 5 1210 1115 re
W
1500 515 m
1500 495.66 1484.34 480 1465 480 c
1445.66 480 1430 495.66 1430 515 c
1430 534.34 1445.66 550 1465 550 c
1484.34 550 1500 534.34 1500 515 c
S
Q
2720 735 m
2720 715.66 2704.34 700 2685 700 c
2665.66 700 2650 715.66 2650 735 c
2650 754.34 2665.66 770 2685 770 c
2704.34 770 2720 754.34 2720 735 c
S
1850 1655 m
1850 1635.66 1834.34 1620 1815 1620 c
1795.66 1620 1780 1635.66 1780 1655 c
1780 1674.34 1795.66 1690 1815 1690 c
1834.34 1690 1850 1674.34 1850 1655 c
S
1450 1725 m
1450 1705.66 1434.34 1690 1415 1690 c
1395.66 1690 1380 1705.66 1380 1725 c
1380 1744.34 1395.66 1760 1415 1760 c
1434.34 1760 1450 1744.34 1450 1725 c
S
q
0 5 1210 1115 re
W
640 515 m
640 495.66 624.34 480 605 480 c
585.66 480 570 495.66 570 515 c
570 534.34 585.66 550 605 550 c
624.34 550 640 534.34 640 515 c
S
Q
2190 705 m
2190 685.66 2174.34 670 2155 670 c
2135.66 670 2120 685.66 2120 705 c
2120 724.34 2135.66 740 2155 740 c
2174.34 740 2190 724.34 2190 705 c
S
q
1600 1720 1210 1145 re
W
2240 2325 m
2240 2305.66 2224.34 2290 2205 2290 c
2185.66 2290 2170 2305.66 2170 2325 c
2170 2344.34 2185.66 2360 2205 2360 c
2224.34 2360 2240 2344.34 2240 2325 c
S
Q
2900 625 m
2900 605.66 2884.34 590 2865 590 c
2845.66 590 2830 605.66 2830 625 c
2830 644.34 2845.66 660 2865 660 c
2884.34 660 2900 644.34 2900 625 c
S
2290 1325 m
2290 1305.66 2274.34 1290 2255 1290 c
2235.66 1290 2220 1305.66 2220 1325 c
2220 1344.34 2235.66 1360 2255 1360 c
2274.34 1360 2290 1344.34 2290 1325 c
S
2070 875 m
2070 855.66 2054.34 840 2035 840 c
2015.66 840 2000 855.66 2000 875 c
2000 894.34 2015.66 910 2035 910 c
2054.34 910 2070 894.34 2070 875 c
S
3200 905 m
3200 885.66 3184.34 870 3165 870 c
3145.66 870 3130 885.66 3130 905 c
3130 924.34 3145.66 940 3165 940 c
3184.34 940 3200 924.34 3200 905 c
S
q
2110 5 1210 1115 re
W
2750 515 m
2750 495.66 2734.34 480 2715 480 c
2695.66 480 2680 495.66 2680 515 c
2680 534.34 2695.66 550 2715 550 c
2734.34 550 2750 534.34 2750 515 c
S
Q
640 1725 m
640 1705.66 624.34 1690 605 1690 c
585.66 1690 570 1705.66 570 1725 c
570 1744.34 585.66 1760 605 1760 c
624.34 1760 640 1744.34 640 1725 c
S
2630 1655 m
2630 1635.66 2614.34 1620 2595 1620 c
2575.66 1620 2560 1635.66 2560 1655 c
2560 1674.34 2575.66 1690 2595 1690 c
2614.34 1690 2630 1674.34 2630 1655 c
S
q
490 1670 1210 1195 re
W
1130 2275 m
1130 2255.66 1114.34 2240 1095 2240 c
1075.66 2240 1060 2255.66 1060 2275 c
1060 2294.34 1075.66 2310 1095 2310 c
1114.34 2310 1130 2294.34 1130 2275 c
S
Q
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
