%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 155 197
%%HiResBoundingBox: 0 0 155 197
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 155 197 re
W
q
q
[1 0 0 1 1 -45] cm
q
[1 0 0 1 0 0] cm
0 0 186 287 re
W
q
[0.1 0 0 0.1 0 0] cm
20 w
/DeviceRGB {} CS
[0 0 1] SC
1140 2350 m
1140 2090 l
S
1180 1300 m
1180 1560 l
S
1140 2090 m
560 1820 l
S
1140 2090 m
1180 1820 l
S
1140 2090 m
1330 1820 l
S
1140 2090 m
1480 1820 l
S
60 1300 m
60 1560 l
S
60 1300 m
60 1040 l
S
580 1300 m
810 1560 l
S
210 1040 m
730 1300 l
S
360 1040 m
730 1300 l
S
510 1040 m
730 1300 l
S
510 1040 m
430 770 l
S
510 1040 m
580 770 l
S
60 1560 m
560 1820 l
S
660 1040 m
730 1300 l
S
1180 1820 m
1180 1560 l
S
430 1560 m
560 1820 l
S
810 1040 m
730 1300 l
S
810 1560 m
560 1820 l
S
810 1560 m
730 1300 l
S
810 1560 m
880 1300 l
S
810 1560 m
1030 1300 l
S
1260 510 m
1260 770 l
S
560 1820 m
960 1560 l
S
1260 770 m
1260 1040 l
S
960 1040 m
730 1300 l
S
1110 1040 m
730 1300 l
S
730 1300 m
1260 1040 l
S
q
530 1750 1210 1115 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
1170 2355 m
1170 2335.66 1154.34 2320 1135 2320 c
1115.66 2320 1100 2335.66 1100 2355 c
1100 2374.34 1115.66 2390 1135 2390 c
1154.34 2390 1170 2374.34 1170 2355 c
S
Q
40 w
/DeviceRGB {} CS
[1 1 0] SC
1210 1305 m
1210 1285.66 1194.34 1270 1175 1270 c
1155.66 1270 1140 1285.66 1140 1305 c
1140 1324.34 1155.66 1340 1175 1340 c
1194.34 1340 1210 1324.34 1210 1305 c
S
1170 2095 m
1170 2075.66 1154.34 2060 1135 2060 c
1115.66 2060 1100 2075.66 1100 2095 c
1100 2114.34 1115.66 2130 1135 2130 c
1154.34 2130 1170 2114.34 1170 2095 c
S
90 1305 m
90 1285.66 74.3398 1270 55 1270 c
35.6602 1270 20 1285.66 20 1305 c
20 1324.34 35.6602 1340 55 1340 c
74.3398 1340 90 1324.34 90 1305 c
S
610 1305 m
610 1285.66 594.34 1270 575 1270 c
555.66 1270 540 1285.66 540 1305 c
540 1324.34 555.66 1340 575 1340 c
594.34 1340 610 1324.34 610 1305 c
S
240 1045 m
240 1025.66 224.34 1010 205 1010 c
185.66 1010 170 1025.66 170 1045 c
170 1064.34 185.66 1080 205 1080 c
224.34 1080 240 1064.34 240 1045 c
S
390 1045 m
390 1025.66 374.34 1010 355 1010 c
335.66 1010 320 1025.66 320 1045 c
320 1064.34 335.66 1080 355 1080 c
374.34 1080 390 1064.34 390 1045 c
S
540 1045 m
540 1025.66 524.34 1010 505 1010 c
485.66 1010 470 1025.66 470 1045 c
470 1064.34 485.66 1080 505 1080 c
524.34 1080 540 1064.34 540 1045 c
S
90 1565 m
90 1545.66 74.3398 1530 55 1530 c
35.6602 1530 20 1545.66 20 1565 c
20 1584.34 35.6602 1600 55 1600 c
74.3398 1600 90 1584.34 90 1565 c
S
690 1045 m
690 1025.66 674.34 1010 655 1010 c
635.66 1010 620 1025.66 620 1045 c
620 1064.34 635.66 1080 655 1080 c
674.34 1080 690 1064.34 690 1045 c
S
1210 1825 m
1210 1805.66 1194.34 1790 1175 1790 c
1155.66 1790 1140 1805.66 1140 1825 c
1140 1844.34 1155.66 1860 1175 1860 c
1194.34 1860 1210 1844.34 1210 1825 c
S
460 1565 m
460 1545.66 444.34 1530 425 1530 c
405.66 1530 390 1545.66 390 1565 c
390 1584.34 405.66 1600 425 1600 c
444.34 1600 460 1584.34 460 1565 c
S
1360 1825 m
1360 1805.66 1344.34 1790 1325 1790 c
1305.66 1790 1290 1805.66 1290 1825 c
1290 1844.34 1305.66 1860 1325 1860 c
1344.34 1860 1360 1844.34 1360 1825 c
S
840 1045 m
840 1025.66 824.34 1010 805 1010 c
785.66 1010 770 1025.66 770 1045 c
770 1064.34 785.66 1080 805 1080 c
824.34 1080 840 1064.34 840 1045 c
S
840 1565 m
840 1545.66 824.34 1530 805 1530 c
785.66 1530 770 1545.66 770 1565 c
770 1584.34 785.66 1600 805 1600 c
824.34 1600 840 1584.34 840 1565 c
S
q
650 5 1210 1115 re
W
1290 515 m
1290 495.66 1274.34 480 1255 480 c
1235.66 480 1220 495.66 1220 515 c
1220 534.34 1235.66 550 1255 550 c
1274.34 550 1290 534.34 1290 515 c
S
Q
610 775 m
610 755.66 594.34 740 575 740 c
555.66 740 540 755.66 540 775 c
540 794.34 555.66 810 575 810 c
594.34 810 610 794.34 610 775 c
S
460 775 m
460 755.66 444.34 740 425 740 c
405.66 740 390 755.66 390 775 c
390 794.34 405.66 810 425 810 c
444.34 810 460 794.34 460 775 c
S
590 1825 m
590 1805.66 574.34 1790 555 1790 c
535.66 1790 520 1805.66 520 1825 c
520 1844.34 535.66 1860 555 1860 c
574.34 1860 590 1844.34 590 1825 c
S
1510 1825 m
1510 1805.66 1494.34 1790 1475 1790 c
1455.66 1790 1440 1805.66 1440 1825 c
1440 1844.34 1455.66 1860 1475 1860 c
1494.34 1860 1510 1844.34 1510 1825 c
S
910 1305 m
910 1285.66 894.34 1270 875 1270 c
855.66 1270 840 1285.66 840 1305 c
840 1324.34 855.66 1340 875 1340 c
894.34 1340 910 1324.34 910 1305 c
S
1210 1565 m
1210 1545.66 1194.34 1530 1175 1530 c
1155.66 1530 1140 1545.66 1140 1565 c
1140 1584.34 1155.66 1600 1175 1600 c
1194.34 1600 1210 1584.34 1210 1565 c
S
1290 775 m
1290 755.66 1274.34 740 1255 740 c
1235.66 740 1220 755.66 1220 775 c
1220 794.34 1235.66 810 1255 810 c
1274.34 810 1290 794.34 1290 775 c
S
990 1045 m
990 1025.66 974.34 1010 955 1010 c
935.66 1010 920 1025.66 920 1045 c
920 1064.34 935.66 1080 955 1080 c
974.34 1080 990 1064.34 990 1045 c
S
1140 1045 m
1140 1025.66 1124.34 1010 1105 1010 c
1085.66 1010 1070 1025.66 1070 1045 c
1070 1064.34 1085.66 1080 1105 1080 c
1124.34 1080 1140 1064.34 1140 1045 c
S
1060 1305 m
1060 1285.66 1044.34 1270 1025 1270 c
1005.66 1270 990 1285.66 990 1305 c
990 1324.34 1005.66 1340 1025 1340 c
1044.34 1340 1060 1324.34 1060 1305 c
S
90 1045 m
90 1025.66 74.3398 1010 55 1010 c
35.6602 1010 20 1025.66 20 1045 c
20 1064.34 35.6602 1080 55 1080 c
74.3398 1080 90 1064.34 90 1045 c
S
990 1565 m
990 1545.66 974.34 1530 955 1530 c
935.66 1530 920 1545.66 920 1565 c
920 1584.34 935.66 1600 955 1600 c
974.34 1600 990 1584.34 990 1565 c
S
760 1305 m
760 1285.66 744.34 1270 725 1270 c
705.66 1270 690 1285.66 690 1305 c
690 1324.34 705.66 1340 725 1340 c
744.34 1340 760 1324.34 760 1305 c
S
1290 1045 m
1290 1025.66 1274.34 1010 1255 1010 c
1235.66 1010 1220 1025.66 1220 1045 c
1220 1064.34 1235.66 1080 1255 1080 c
1274.34 1080 1290 1064.34 1290 1045 c
S
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
