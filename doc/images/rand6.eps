%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 268 208
%%HiResBoundingBox: 0 0 268 208
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 268 208 re
W
q
q
[1 0 0 1 -49 -38] cm
q
[1 0 0 1 0 0] cm
0 0 365 287 re
W
q
[0.1 0 0 0.1 0 0] cm
20 w
/DeviceRGB {} CS
[0 0 1] SC
610 2350 m
610 510 l
S
610 2350 m
1420 510 l
S
610 2350 m
3050 510 l
S
1830 2350 m
610 510 l
S
1830 2350 m
1420 510 l
S
3050 2350 m
610 510 l
S
3050 2350 m
2240 510 l
S
3050 2350 m
3050 510 l
S
q
0 1750 1210 1115 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
640 2355 m
640 2335.66 624.34 2320 605 2320 c
585.66 2320 570 2335.66 570 2355 c
570 2374.34 585.66 2390 605 2390 c
624.34 2390 640 2374.34 640 2355 c
S
Q
q
1220 1750 1210 1115 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
1860 2355 m
1860 2335.66 1844.34 2320 1825 2320 c
1805.66 2320 1790 2335.66 1790 2355 c
1790 2374.34 1805.66 2390 1825 2390 c
1844.34 2390 1860 2374.34 1860 2355 c
S
Q
q
2440 1750 1210 1115 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
3080 2355 m
3080 2335.66 3064.34 2320 3045 2320 c
3025.66 2320 3010 2335.66 3010 2355 c
3010 2374.34 3025.66 2390 3045 2390 c
3064.34 2390 3080 2374.34 3080 2355 c
S
Q
q
0 5 1210 1115 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
640 515 m
640 495.66 624.34 480 605 480 c
585.66 480 570 495.66 570 515 c
570 534.34 585.66 550 605 550 c
624.34 550 640 534.34 640 515 c
S
Q
q
810 5 1210 1115 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
1450 515 m
1450 495.66 1434.34 480 1415 480 c
1395.66 480 1380 495.66 1380 515 c
1380 534.34 1395.66 550 1415 550 c
1434.34 550 1450 534.34 1450 515 c
S
Q
q
1630 5 1210 1115 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
2270 515 m
2270 495.66 2254.34 480 2235 480 c
2215.66 480 2200 495.66 2200 515 c
2200 534.34 2215.66 550 2235 550 c
2254.34 550 2270 534.34 2270 515 c
S
Q
q
2440 5 1210 1115 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
3080 515 m
3080 495.66 3064.34 480 3045 480 c
3025.66 480 3010 495.66 3010 515 c
3010 534.34 3025.66 550 3045 550 c
3064.34 550 3080 534.34 3080 515 c
S
Q
10 w
/DeviceGray {} CS
[0] SC
610 2350 m
620 2350 l
S
/DeviceGray {} cs
[0] sc
571.09 2394.53 m
571.09 2433.91 558.59 2453.44 534.059 2453.44 c
509.531 2453.44 496.879 2433.59 496.879 2395.47 c
496.879 2357.34 509.691 2337.66 534.059 2337.66 c
557.969 2337.66 571.09 2357.34 571.09 2394.53 c
h
556.719 2395.78 m
556.719 2363.75 549.379 2349.22 533.75 2349.22 c
518.75 2349.22 511.25 2364.38 511.25 2395.31 c
511.25 2426.41 518.75 2440.94 534.059 2440.94 c
549.219 2440.94 556.719 2426.25 556.719 2395.78 c
h
f
1830 2350 m
1840 2350 l
S
1915.47 2340 m
1915.47 2453.44 l
1906.25 2453.44 l
1901.25 2435.94 1898.12 2433.59 1876.25 2430.94 c
1876.25 2420.78 l
1901.41 2420.78 l
1901.41 2340 l
1915.47 2340 l
h
f
3050 2350 m
3060 2350 l
S
3161.72 2420.16 m
3161.72 2439.38 3146.88 2453.44 3125.47 2453.44 c
3102.19 2453.44 3088.75 2441.56 3087.97 2414.06 c
3102.03 2414.06 l
3103.12 2433.12 3111.09 2441.09 3125 2441.09 c
3137.81 2441.09 3147.34 2432.03 3147.34 2419.84 c
3147.34 2410.94 3142.03 2403.12 3132.03 2397.5 c
3117.34 2389.06 l
3093.59 2375.62 3086.72 2365 3085.47 2340 c
3160.94 2340 l
3160.94 2353.91 l
3101.25 2353.91 l
3102.66 2363.12 3107.81 2369.06 3121.72 2377.34 c
3137.81 2385.94 l
3153.59 2394.38 3161.72 2406.25 3161.72 2420.16 c
h
f
610 510 m
620 510 l
S
570.941 422.969 m
570.941 436.719 565.309 444.691 551.719 449.379 c
562.34 453.59 567.66 460.941 567.66 472.191 c
567.66 491.719 554.691 503.441 532.969 503.441 c
510.16 503.441 497.969 490.941 497.5 466.879 c
511.559 466.879 l
511.879 483.59 518.75 491.09 533.121 491.09 c
545.621 491.09 553.121 483.75 553.121 471.719 c
553.121 459.531 547.969 454.691 525.309 454.691 c
525.309 442.809 l
532.969 442.809 l
548.59 442.809 556.559 435.469 556.559 422.809 c
556.559 408.59 547.809 400.16 532.969 400.16 c
517.66 400.16 510.16 407.809 509.219 424.219 c
495.16 424.219 l
496.879 398.91 509.379 387.66 532.5 387.66 c
555.941 387.66 570.941 401.559 570.941 422.969 c
h
f
1420 510 m
1430 510 l
S
1533.12 417.191 m
1533.12 429.84 l
1516.41 429.84 l
1516.41 503.441 l
1505.94 503.441 l
1454.53 432.031 l
1454.53 417.191 l
1502.34 417.191 l
1502.34 390 l
1516.41 390 l
1516.41 417.191 l
1533.12 417.191 l
h
1502.34 429.84 m
1466.88 429.84 l
1502.34 479.379 l
1502.34 429.84 l
h
f
2240 510 m
2250 510 l
S
2202.03 427.66 m
2202.03 450 2187.19 464.691 2165.47 464.691 c
2157.5 464.691 2151.09 462.66 2144.53 457.809 c
2148.91 487.191 l
2196.09 487.191 l
2196.09 501.09 l
2137.66 501.09 l
2129.06 441.719 l
2142.03 441.719 l
2148.59 449.531 2154.06 452.191 2162.81 452.191 c
2178.12 452.191 2187.66 442.5 2187.66 425.621 c
2187.66 409.379 2178.28 400.16 2162.81 400.16 c
2150.62 400.16 2142.97 406.25 2139.69 419.059 c
2125.62 419.059 l
2130.31 396.559 2142.97 387.66 2163.12 387.66 c
2186.09 387.66 2202.03 403.59 2202.03 427.66 c
h
f
3050 510 m
3060 510 l
S
3162.03 425.16 m
3162.03 446.25 3147.66 460.621 3127.34 460.621 c
3116.09 460.621 3107.34 456.25 3101.25 447.969 c
3101.41 475.621 3110.47 490.941 3126.56 490.941 c
3136.41 490.941 3143.44 484.691 3145.62 473.91 c
3159.69 473.91 l
3157.03 492.34 3144.84 503.441 3127.5 503.441 c
3101.09 503.441 3086.88 481.25 3086.88 441.719 c
3086.88 406.25 3099.06 387.66 3125 387.66 c
3146.56 387.66 3162.03 402.969 3162.03 425.16 c
h
3147.66 424.059 m
3147.66 409.84 3138.12 400.16 3125.16 400.16 c
3112.03 400.16 3102.03 410.309 3102.03 424.84 c
3102.03 438.91 3111.72 448.121 3125.62 448.121 c
3139.22 448.121 3147.66 439.219 3147.66 424.059 c
h
f
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
