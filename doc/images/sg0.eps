%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 215 208
%%HiResBoundingBox: 0 0 215 208
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 215 208 re
W
q
q
[1 0 0 1 0 0] cm
q
[1 0 0 1 0 0] cm
0 0 215 208 re
W
q
[0.1 0 0 0.1 0 0] cm
{} settransfer
20 w
/DeviceRGB {} CS
[0 0 1] SC
1090 1970 m
2060 1270 l
S
1090 1970 m
1690 130 l
S
1090 1970 m
490 130 l
S
1090 1970 m
120 1270 l
S
/DeviceRGB {} CS
[1 0 0] SC
2060 1270 m
1690 130 l
S
/DeviceRGB {} CS
[0 0 1] SC
2060 1270 m
490 130 l
S
/DeviceRGB {} CS
[1 0 0] SC
2060 1270 m
120 1270 l
S
1690 130 m
490 130 l
S
/DeviceRGB {} CS
[0 0 1] SC
1690 130 m
120 1270 l
S
/DeviceRGB {} CS
[1 0 0] SC
490 130 m
120 1270 l
S
q
480 1370 1210 710 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
1120 1975 m
1120 1955.66 1104.34 1940 1085 1940 c
1065.66 1940 1050 1955.66 1050 1975 c
1050 1994.34 1065.66 2010 1085 2010 c
1104.34 2010 1120 1994.34 1120 1975 c
S
Q
40 w
/DeviceRGB {} CS
[0 1 0] SC
2090 1275 m
2090 1255.66 2074.34 1240 2055 1240 c
2035.66 1240 2020 1255.66 2020 1275 c
2020 1294.34 2035.66 1310 2055 1310 c
2074.34 1310 2090 1294.34 2090 1275 c
S
q
1080 0 1070 740 re
W
1720 135 m
1720 115.66 1704.34 100 1685 100 c
1665.66 100 1650 115.66 1650 135 c
1650 154.34 1665.66 170 1685 170 c
1704.34 170 1720 154.34 1720 135 c
S
Q
q
0 0 1090 740 re
W
520 135 m
520 115.66 504.34 100 485 100 c
465.66 100 450 115.66 450 135 c
450 154.34 465.66 170 485 170 c
504.34 170 520 154.34 520 135 c
S
Q
150 1275 m
150 1255.66 134.34 1240 115 1240 c
95.6602 1240 80 1255.66 80 1275 c
80 1294.34 95.6602 1310 115 1310 c
134.34 1310 150 1294.34 150 1275 c
S
10 w
/DeviceGray {} CS
[0] SC
1090 1970 m
1100 1970 l
S
/DeviceGray {} cs
[0] sc
1201.09 2014.53 m
1201.09 2053.91 1188.59 2073.44 1164.06 2073.44 c
1139.53 2073.44 1126.88 2053.59 1126.88 2015.47 c
1126.88 1977.34 1139.69 1957.66 1164.06 1957.66 c
1187.97 1957.66 1201.09 1977.34 1201.09 2014.53 c
h
1186.72 2015.78 m
1186.72 1983.75 1179.38 1969.22 1163.75 1969.22 c
1148.75 1969.22 1141.25 1984.38 1141.25 2015.31 c
1141.25 2046.41 1148.75 2060.94 1164.06 2060.94 c
1179.22 2060.94 1186.72 2046.25 1186.72 2015.78 c
f
2060 1270 m
2070 1270 l
S
2145.47 1260 m
2145.47 1373.44 l
2136.25 1373.44 l
2131.25 1355.94 2128.12 1353.59 2106.25 1350.94 c
2106.25 1340.78 l
2131.41 1340.78 l
2131.41 1260 l
2145.47 1260 l
f
1690 130 m
1700 130 l
S
1801.72 90.1602 m
1801.72 109.379 1786.88 123.441 1765.47 123.441 c
1742.19 123.441 1728.75 111.559 1727.97 84.0586 c
1742.03 84.0586 l
1743.12 103.121 1751.09 111.09 1765 111.09 c
1777.81 111.09 1787.34 102.031 1787.34 89.8398 c
1787.34 80.9414 1782.03 73.1211 1772.03 67.5 c
1757.34 59.0586 l
1733.59 45.6211 1726.72 35 1725.47 10 c
1800.94 10 l
1800.94 23.9102 l
1741.25 23.9102 l
1742.66 33.1211 1747.81 39.0586 1761.72 47.3398 c
1777.81 55.9414 l
1793.59 64.3789 1801.72 76.25 1801.72 90.1602 c
f
490 130 m
500 130 l
S
450.941 42.9688 m
450.941 56.7188 445.309 64.6914 431.719 69.3789 c
442.34 73.5898 447.66 80.9414 447.66 92.1914 c
447.66 111.719 434.691 123.441 412.969 123.441 c
390.16 123.441 377.969 110.941 377.5 86.8789 c
391.559 86.8789 l
391.879 103.59 398.75 111.09 413.121 111.09 c
425.621 111.09 433.121 103.75 433.121 91.7188 c
433.121 79.5313 427.969 74.6914 405.309 74.6914 c
405.309 62.8086 l
412.969 62.8086 l
428.59 62.8086 436.559 55.4688 436.559 42.8086 c
436.559 28.5898 427.809 20.1602 412.969 20.1602 c
397.66 20.1602 390.16 27.8086 389.219 44.2188 c
375.16 44.2188 l
376.879 18.9102 389.379 7.66016 412.5 7.66016 c
435.941 7.66016 450.941 21.5586 450.941 42.9688 c
f
120 1270 m
130 1270 l
S
83.1211 1287.19 m
83.1211 1299.84 l
66.4102 1299.84 l
66.4102 1373.44 l
55.9414 1373.44 l
4.53125 1302.03 l
4.53125 1287.19 l
52.3398 1287.19 l
52.3398 1260 l
66.4102 1260 l
66.4102 1287.19 l
83.1211 1287.19 l
h
52.3398 1299.84 m
16.8789 1299.84 l
52.3398 1349.38 l
52.3398 1299.84 l
h
f
{} settransfer
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
