%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 390 108
%%HiResBoundingBox: 0 0 390 108
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 390 108 re
W
q
q
[1 0 0 1 0 0] cm
q
[1 0 0 1 0 0] cm
0 0 390 108 re
W
q
[0.1 0 0 0.1 0 0] cm
20 w
/DeviceRGB {} CS
[0 0 1] SC
130 970 m
120 130 l
S
130 970 m
1190 540 l
S
120 130 m
1190 540 l
S
1190 540 m
2710 540 l
S
/DeviceRGB {} CS
[1 0 0] SC
2710 540 m
3770 970 l
S
2710 540 m
3780 130 l
S
3770 970 m
3780 130 l
S
40 w
/DeviceRGB {} CS
[1 1 0] SC
160 975 m
160 955.66 144.34 940 125 940 c
105.66 940 90 955.66 90 975 c
90 994.34 105.66 1010 125 1010 c
144.34 1010 160 994.34 160 975 c
S
150 135 m
150 115.66 134.34 100 115 100 c
95.6602 100 80 115.66 80 135 c
80 154.34 95.6602 170 115 170 c
134.34 170 150 154.34 150 135 c
S
1220 545 m
1220 525.66 1204.34 510 1185 510 c
1165.66 510 1150 525.66 1150 545 c
1150 564.34 1165.66 580 1185 580 c
1204.34 580 1220 564.34 1220 545 c
S
/DeviceRGB {} CS
[0 1 0] SC
2740 545 m
2740 525.66 2724.34 510 2705 510 c
2685.66 510 2670 525.66 2670 545 c
2670 564.34 2685.66 580 2705 580 c
2724.34 580 2740 564.34 2740 545 c
S
3800 975 m
3800 955.66 3784.34 940 3765 940 c
3745.66 940 3730 955.66 3730 975 c
3730 994.34 3745.66 1010 3765 1010 c
3784.34 1010 3800 994.34 3800 975 c
S
3810 135 m
3810 115.66 3794.34 100 3775 100 c
3755.66 100 3740 115.66 3740 135 c
3740 154.34 3755.66 170 3775 170 c
3794.34 170 3810 154.34 3810 135 c
S
10 w
/DeviceGray {} CS
[0] SC
130 970 m
140 970 l
S
/DeviceGray {} cs
[0] sc
51.4102 1040.78 m
51.4102 960 l
65.4688 960 l
65.4688 1073.44 l
56.25 1073.44 l
51.25 1055.94 48.1211 1053.59 26.25 1050.94 c
26.25 1040.78 l
51.4102 1040.78 l
h
f
120 130 m
130 130 l
S
80.9414 23.9102 m
21.25 23.9102 l
22.6602 33.1211 27.8086 39.0586 41.7188 47.3398 c
57.8086 55.9414 l
73.5898 64.5313 81.7188 76.25 81.7188 90.1602 c
81.7188 99.5313 77.9688 108.441 71.25 114.691 c
64.5313 120.621 56.25 123.441 45.4688 123.441 c
31.0898 123.441 20.3086 118.441 14.0586 108.75 c
10.1602 102.66 8.28125 95.6211 7.96875 84.0586 c
22.0313 84.0586 l
22.5 91.7188 23.5898 96.4102 25.4688 100.16 c
29.0586 107.031 36.4102 111.09 45 111.09 c
57.8086 111.09 67.3398 102.031 67.3398 89.8398 c
67.3398 80.9414 62.0313 73.1211 52.0313 67.5 c
37.3398 59.0586 l
13.5898 45.6211 6.71875 35 5.46875 10 c
80.9414 10 l
80.9414 23.9102 l
h
f
1190 540 m
1200 540 l
S
1255.31 472.031 m
1257.19 472.031 l
1262.97 472.191 l
1278.59 472.191 1286.56 465.16 1286.56 451.559 c
1286.56 437.34 1277.81 428.75 1262.97 428.75 c
1247.66 428.75 1240.16 436.41 1239.22 452.969 c
1225.16 452.969 l
1225.78 443.91 1227.34 437.969 1230.16 432.809 c
1235.78 421.879 1247.03 416.25 1262.5 416.25 c
1285.94 416.25 1300.94 430.309 1300.94 451.719 c
1300.94 466.09 1295.31 474.059 1281.72 478.75 c
1292.34 482.969 1297.66 490.941 1297.66 502.191 c
1297.66 521.719 1284.69 533.441 1262.97 533.441 c
1240.16 533.441 1227.97 520.941 1227.5 496.879 c
1241.56 496.879 l
1241.72 503.75 1242.34 507.5 1244.22 511.09 c
1247.34 517.34 1254.38 521.09 1263.12 521.09 c
1275.62 521.09 1283.12 513.91 1283.12 501.719 c
1283.12 493.75 1280.31 488.91 1274.06 486.41 c
1270.31 484.84 1265.31 484.219 1255.31 484.059 c
1255.31 472.031 l
h
f
2710 540 m
2720 540 l
S
2642.34 557.191 m
2642.34 530 l
2656.41 530 l
2656.41 557.191 l
2673.12 557.191 l
2673.12 569.84 l
2656.41 569.84 l
2656.41 643.441 l
2645.94 643.441 l
2594.53 572.031 l
2594.53 557.191 l
2642.34 557.191 l
h
2642.34 569.84 m
2606.88 569.84 l
2642.34 619.379 l
2642.34 569.84 l
h
f
3770 970 m
3780 970 l
S
3876.09 1073.44 m
3817.66 1073.44 l
3809.06 1011.72 l
3822.03 1011.72 l
3828.59 1019.53 3834.06 1022.19 3842.97 1022.19 c
3858.28 1022.19 3867.66 1011.88 3867.66 995 c
3867.66 978.75 3858.28 968.75 3842.81 968.75 c
3830.62 968.75 3822.97 975 3819.69 987.809 c
3805.62 987.809 l
3807.5 978.59 3809.06 974.059 3812.5 969.84 c
3818.91 961.25 3830.47 956.25 3843.12 956.25 c
3866.09 956.25 3882.03 972.969 3882.03 997.031 c
3882.03 1019.38 3867.19 1034.69 3845.47 1034.69 c
3837.5 1034.69 3831.09 1032.66 3824.53 1027.81 c
3828.91 1059.53 l
3876.09 1059.53 l
3876.09 1073.44 l
h
f
3780 130 m
3790 130 l
S
3889.69 93.9102 m
3887.03 112.34 3874.84 123.441 3857.5 123.441 c
3845 123.441 3833.91 117.5 3827.19 107.34 c
3820.16 96.25 3816.88 82.3398 3816.88 61.7188 c
3816.88 42.5 3819.69 30.4688 3826.41 20.4688 c
3832.5 11.25 3842.5 6.25 3855 6.25 c
3876.56 6.25 3892.03 22.3398 3892.03 44.5313 c
3892.03 65.6211 3877.66 80.6211 3857.34 80.6211 c
3846.09 80.6211 3837.34 76.25 3831.25 67.9688 c
3831.41 95.6211 3840.47 110.941 3856.56 110.941 c
3866.41 110.941 3873.44 104.691 3875.62 93.9102 c
3889.69 93.9102 l
h
3855.62 68.1211 m
3869.22 68.1211 3877.66 58.5898 3877.66 43.4414 c
3877.66 29.2188 3868.12 18.75 3855.16 18.75 c
3842.03 18.75 3832.03 29.6914 3832.03 44.2188 c
3832.03 58.2813 3841.72 68.1211 3855.62 68.1211 c
h
f
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
