%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 218 208
%%HiResBoundingBox: 0 0 218 208
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 218 208 re
W
q
q
[1 0 0 1 -12 -38] cm
q
[1 0 0 1 0 0] cm
0 0 241 287 re
W
q
[0.1 0 0 0.1 0 0] cm
20 w
/DeviceRGB {} CS
[0 0 1] SC
1210 1330 m
1210 2350 l
S
1210 1330 m
2180 1650 l
S
1210 1330 m
1810 510 l
S
1210 1330 m
610 510 l
S
1210 1330 m
240 1650 l
S
40 w
/DeviceRGB {} CS
[1 1 0] SC
1240 1335 m
1240 1315.66 1224.34 1300 1205 1300 c
1185.66 1300 1170 1315.66 1170 1335 c
1170 1354.34 1185.66 1370 1205 1370 c
1224.34 1370 1240 1354.34 1240 1335 c
S
q
600 1750 1210 1115 re
W
1240 2355 m
1240 2335.66 1224.34 2320 1205 2320 c
1185.66 2320 1170 2335.66 1170 2355 c
1170 2374.34 1185.66 2390 1205 2390 c
1224.34 2390 1240 2374.34 1240 2355 c
S
Q
2210 1655 m
2210 1635.66 2194.34 1620 2175 1620 c
2155.66 1620 2140 1635.66 2140 1655 c
2140 1674.34 2155.66 1690 2175 1690 c
2194.34 1690 2210 1674.34 2210 1655 c
S
q
1200 5 1210 1115 re
W
1840 515 m
1840 495.66 1824.34 480 1805 480 c
1785.66 480 1770 495.66 1770 515 c
1770 534.34 1785.66 550 1805 550 c
1824.34 550 1840 534.34 1840 515 c
S
Q
q
0 5 1210 1115 re
W
640 515 m
640 495.66 624.34 480 605 480 c
585.66 480 570 495.66 570 515 c
570 534.34 585.66 550 605 550 c
624.34 550 640 534.34 640 515 c
S
Q
270 1655 m
270 1635.66 254.34 1620 235 1620 c
215.66 1620 200 1635.66 200 1655 c
200 1674.34 215.66 1690 235 1690 c
254.34 1690 270 1674.34 270 1655 c
S
10 w
/DeviceGray {} CS
[0] SC
1210 1330 m
1220 1330 l
S
/DeviceGray {} cs
[0] sc
1321.09 1374.53 m
1321.09 1413.91 1308.59 1433.44 1284.06 1433.44 c
1259.53 1433.44 1246.88 1413.59 1246.88 1375.47 c
1246.88 1337.34 1259.69 1317.66 1284.06 1317.66 c
1307.97 1317.66 1321.09 1337.34 1321.09 1374.53 c
h
1306.72 1375.78 m
1306.72 1343.75 1299.38 1329.22 1283.75 1329.22 c
1268.75 1329.22 1261.25 1344.38 1261.25 1375.31 c
1261.25 1406.41 1268.75 1420.94 1284.06 1420.94 c
1299.22 1420.94 1306.72 1406.25 1306.72 1375.78 c
h
f
1210 2350 m
1220 2350 l
S
1295.47 2340 m
1295.47 2453.44 l
1286.25 2453.44 l
1281.25 2435.94 1278.12 2433.59 1256.25 2430.94 c
1256.25 2420.78 l
1281.41 2420.78 l
1281.41 2340 l
1295.47 2340 l
h
f
2180 1650 m
2190 1650 l
S
2291.72 1720.16 m
2291.72 1739.38 2276.88 1753.44 2255.47 1753.44 c
2232.19 1753.44 2218.75 1741.56 2217.97 1714.06 c
2232.03 1714.06 l
2233.12 1733.12 2241.09 1741.09 2255 1741.09 c
2267.81 1741.09 2277.34 1732.03 2277.34 1719.84 c
2277.34 1710.94 2272.03 1703.12 2262.03 1697.5 c
2247.34 1689.06 l
2223.59 1675.62 2216.72 1665 2215.47 1640 c
2290.94 1640 l
2290.94 1653.91 l
2231.25 1653.91 l
2232.66 1663.12 2237.81 1669.06 2251.72 1677.34 c
2267.81 1685.94 l
2283.59 1694.38 2291.72 1706.25 2291.72 1720.16 c
h
f
1810 510 m
1820 510 l
S
1920.94 422.969 m
1920.94 436.719 1915.31 444.691 1901.72 449.379 c
1912.34 453.59 1917.66 460.941 1917.66 472.191 c
1917.66 491.719 1904.69 503.441 1882.97 503.441 c
1860.16 503.441 1847.97 490.941 1847.5 466.879 c
1861.56 466.879 l
1861.88 483.59 1868.75 491.09 1883.12 491.09 c
1895.62 491.09 1903.12 483.75 1903.12 471.719 c
1903.12 459.531 1897.97 454.691 1875.31 454.691 c
1875.31 442.809 l
1882.97 442.809 l
1898.59 442.809 1906.56 435.469 1906.56 422.809 c
1906.56 408.59 1897.81 400.16 1882.97 400.16 c
1867.66 400.16 1860.16 407.809 1859.22 424.219 c
1845.16 424.219 l
1846.88 398.91 1859.38 387.66 1882.5 387.66 c
1905.94 387.66 1920.94 401.559 1920.94 422.969 c
h
f
610 510 m
620 510 l
S
573.121 417.191 m
573.121 429.84 l
556.41 429.84 l
556.41 503.441 l
545.941 503.441 l
494.531 432.031 l
494.531 417.191 l
542.34 417.191 l
542.34 390 l
556.41 390 l
556.41 417.191 l
573.121 417.191 l
h
542.34 429.84 m
506.879 429.84 l
542.34 479.379 l
542.34 429.84 l
h
f
240 1650 m
250 1650 l
S
202.031 1677.66 m
202.031 1700 187.191 1714.69 165.469 1714.69 c
157.5 1714.69 151.09 1712.66 144.531 1707.81 c
148.91 1737.19 l
196.09 1737.19 l
196.09 1751.09 l
137.66 1751.09 l
129.059 1691.72 l
142.031 1691.72 l
148.59 1699.53 154.059 1702.19 162.809 1702.19 c
178.121 1702.19 187.66 1692.5 187.66 1675.62 c
187.66 1659.38 178.281 1650.16 162.809 1650.16 c
150.621 1650.16 142.969 1656.25 139.691 1669.06 c
125.621 1669.06 l
130.309 1646.56 142.969 1637.66 163.121 1637.66 c
186.09 1637.66 202.031 1653.59 202.031 1677.66 c
h
f
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
