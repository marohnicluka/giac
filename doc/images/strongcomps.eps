%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 240 185
%%HiResBoundingBox: 0 0 240 185
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 240 185 re
W
q
q
[1 0 0 1 -176 -18] cm
q
[1 0 0 1 0 0] cm
0 0 571 229 re
W
q
[0.1 0 0 0.1 0 0] cm
q
5 5 5700 2270 re
W
20 w
/DeviceRGB {} CS
[0 0 1] SC
3900 620 m
3770 470 l
S
/DeviceRGB {} cs
[0 0 1] sc
3770 470 m
3830 490 l
3780 530 l
f
3770 470 m
3610 280 l
S
3610 280 m
3820 420 l
S
3820 420 m
3760 420 l
3790 370 l
f
3820 420 m
4100 620 l
S
3610 280 m
3280 260 l
S
3280 260 m
3350 220 l
3350 300 l
f
3280 260 m
2850 240 l
S
4100 620 m
4020 620 l
S
4020 620 m
4070 590 l
4070 650 l
f
4020 620 m
3900 620 l
S
2850 240 m
2570 290 l
S
2570 290 m
2620 250 l
2630 310 l
f
2570 290 m
2200 370 l
S
2850 240 m
2690 290 l
S
2690 290 m
2730 250 l
2740 300 l
f
2690 290 m
2460 360 l
S
3760 1110 m
3820 900 l
S
3820 900 m
3830 960 l
3780 940 l
f
3820 900 m
3900 620 l
S
3760 1110 m
3910 900 l
S
3910 900 m
3900 960 l
3850 930 l
f
3910 900 m
4100 620 l
S
3760 1110 m
3610 1230 l
S
3610 1230 m
3630 1170 l
3670 1220 l
f
3610 1230 m
3410 1380 l
S
3760 1110 m
3560 1250 l
S
3560 1250 m
3590 1200 l
3620 1250 l
f
3560 1250 m
3160 1540 l
S
3410 1380 m
3310 1450 l
S
3310 1450 m
3330 1400 l
3370 1450 l
f
3310 1450 m
3160 1540 l
S
3160 1540 m
3030 1390 l
S
3030 1390 m
3080 1410 l
3040 1450 l
f
3030 1390 m
2840 1190 l
S
3160 1540 m
3030 1720 l
S
3030 1720 m
3030 1660 l
3080 1700 l
f
3030 1720 m
2840 1960 l
S
2200 370 m
2320 370 l
S
2320 370 m
2260 400 l
2260 340 l
f
2320 370 m
2460 360 l
S
2200 370 m
2040 480 l
S
2040 480 m
2070 420 l
2100 470 l
f
2040 480 m
1830 620 l
S
2200 370 m
2260 580 l
S
2260 580 m
2220 540 l
2280 530 l
f
2260 580 m
2340 870 l
S
2460 360 m
2410 580 l
S
2410 580 m
2400 520 l
2450 540 l
f
2410 580 m
2340 870 l
S
2460 360 m
2550 490 l
S
2550 490 m
2500 470 l
2550 430 l
f
2550 490 m
2670 670 l
S
1830 620 m
2050 730 l
S
2050 730 m
1990 730 l
2020 680 l
f
2050 730 m
2340 870 l
S
2340 870 m
2480 790 l
S
2480 790 m
2460 840 l
2420 790 l
f
2480 790 m
2670 670 l
S
2340 870 m
2560 1010 l
S
2560 1010 m
2500 1010 l
2530 950 l
f
2560 1010 m
2840 1190 l
S
2340 870 m
2470 1140 l
S
2470 1140 m
2420 1110 l
2480 1080 l
f
2470 1140 m
2640 1500 l
S
2670 670 m
2750 480 l
S
2750 480 m
2760 540 l
2700 520 l
f
2750 480 m
2850 240 l
S
2670 670 m
2750 890 l
S
2750 890 m
2700 850 l
2760 830 l
f
2750 890 m
2840 1190 l
S
2840 1190 m
3090 1270 l
S
3090 1270 m
3030 1280 l
3050 1230 l
f
3090 1270 m
3410 1380 l
S
2840 1190 m
2760 1320 l
S
2760 1320 m
2760 1260 l
2810 1300 l
f
2760 1320 m
2640 1500 l
S
2640 1500 m
2860 1520 l
S
2860 1520 m
2810 1550 l
2810 1490 l
f
2860 1520 m
3160 1540 l
S
2840 1960 m
2750 1760 l
S
2750 1760 m
2800 1800 l
2750 1820 l
f
2750 1760 m
2640 1500 l
S
40 w
/DeviceRGB {} CS
[1 0 1] SC
3930 625 m
3930 605.66 3914.34 590 3895 590 c
3875.66 590 3860 605.66 3860 625 c
3860 644.34 3875.66 660 3895 660 c
3914.34 660 3930 644.34 3930 625 c
S
3640 285 m
3640 265.66 3624.34 250 3605 250 c
3585.66 250 3570 265.66 3570 285 c
3570 304.34 3585.66 320 3605 320 c
3624.34 320 3640 304.34 3640 285 c
S
4130 625 m
4130 605.66 4114.34 590 4095 590 c
4075.66 590 4060 605.66 4060 625 c
4060 644.34 4075.66 660 4095 660 c
4114.34 660 4130 644.34 4130 625 c
S
/DeviceRGB {} CS
[0 1 0] SC
2880 245 m
2880 225.66 2864.34 210 2845 210 c
2825.66 210 2810 225.66 2810 245 c
2810 264.34 2825.66 280 2845 280 c
2864.34 280 2880 264.34 2880 245 c
S
/DeviceRGB {} CS
[1 1 0] SC
3790 1115 m
3790 1095.66 3774.34 1080 3755 1080 c
3735.66 1080 3720 1095.66 3720 1115 c
3720 1134.34 3735.66 1150 3755 1150 c
3774.34 1150 3790 1134.34 3790 1115 c
S
/DeviceRGB {} CS
[1 0 0] SC
3440 1385 m
3440 1365.66 3424.34 1350 3405 1350 c
3385.66 1350 3370 1365.66 3370 1385 c
3370 1404.34 3385.66 1420 3405 1420 c
3424.34 1420 3440 1404.34 3440 1385 c
S
3190 1545 m
3190 1525.66 3174.34 1510 3155 1510 c
3135.66 1510 3120 1525.66 3120 1545 c
3120 1564.34 3135.66 1580 3155 1580 c
3174.34 1580 3190 1564.34 3190 1545 c
S
/DeviceRGB {} CS
[0 1 0] SC
2230 375 m
2230 355.66 2214.34 340 2195 340 c
2175.66 340 2160 355.66 2160 375 c
2160 394.34 2175.66 410 2195 410 c
2214.34 410 2230 394.34 2230 375 c
S
2490 365 m
2490 345.66 2474.34 330 2455 330 c
2435.66 330 2420 345.66 2420 365 c
2420 384.34 2435.66 400 2455 400 c
2474.34 400 2490 384.34 2490 365 c
S
1860 625 m
1860 605.66 1844.34 590 1825 590 c
1805.66 590 1790 605.66 1790 625 c
1790 644.34 1805.66 660 1825 660 c
1844.34 660 1860 644.34 1860 625 c
S
2370 875 m
2370 855.66 2354.34 840 2335 840 c
2315.66 840 2300 855.66 2300 875 c
2300 894.34 2315.66 910 2335 910 c
2354.34 910 2370 894.34 2370 875 c
S
2700 675 m
2700 655.66 2684.34 640 2665 640 c
2645.66 640 2630 655.66 2630 675 c
2630 694.34 2645.66 710 2665 710 c
2684.34 710 2700 694.34 2700 675 c
S
/DeviceRGB {} CS
[1 0 0] SC
2870 1195 m
2870 1175.66 2854.34 1160 2835 1160 c
2815.66 1160 2800 1175.66 2800 1195 c
2800 1214.34 2815.66 1230 2835 1230 c
2854.34 1230 2870 1214.34 2870 1195 c
S
2670 1505 m
2670 1485.66 2654.34 1470 2635 1470 c
2615.66 1470 2600 1485.66 2600 1505 c
2600 1524.34 2615.66 1540 2635 1540 c
2654.34 1540 2670 1524.34 2670 1505 c
S
2870 1965 m
2870 1945.66 2854.34 1930 2835 1930 c
2815.66 1930 2800 1945.66 2800 1965 c
2800 1984.34 2815.66 2000 2835 2000 c
2854.34 2000 2870 1984.34 2870 1965 c
S
Q
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
