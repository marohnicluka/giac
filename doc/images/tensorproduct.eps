%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 571 287
%%HiResBoundingBox: 0 0 571 287
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 571 287 re
W
q
q
[1 0 0 1 -17 -538] cm
q
[1 0 0 1 0 0] cm
0 0 595 842 re
W
q
[0.1 0 0 0.1 0 0] cm
q
175 5385 5700 2860 re
W
/DeviceGray {} cs
[1] sc
175 5385 5700 2860 re
f
10 w
2 J
/DeviceGray {} CS
[0] SC
180 5390 5690 2850 re
S
20 w
0 J
/DeviceRGB {} CS
[0 0 1] SC
4310 7860 m
4310 7210 l
S
4310 7860 m
3780 7130 l
S
4310 7860 m
4840 7130 l
S
1950 8110 m
1950 6780 l
S
1000 7760 m
1950 6780 l
S
2900 7760 m
1950 6780 l
S
1950 6780 m
2400 5510 l
S
1950 6780 m
1110 6700 l
S
1950 6780 m
2880 6050 l
S
1950 6780 m
1510 5510 l
S
1950 6780 m
2790 6700 l
S
1950 6780 m
1030 6050 l
S
4310 7210 m
4460 6400 l
S
4310 7210 m
4160 6400 l
S
3780 7130 m
4460 6400 l
S
3780 7130 m
4160 6400 l
S
4840 7130 m
4460 6400 l
S
4840 7130 m
4160 6400 l
S
4460 6400 m
3580 5900 l
S
4460 6400 m
5060 5920 l
S
4460 6400 m
4330 5510 l
S
2400 5510 m
1950 6050 l
S
1110 6700 m
1950 6050 l
S
2880 6050 m
1950 6050 l
S
1950 6050 m
1510 5510 l
S
1950 6050 m
2790 6700 l
S
1950 6050 m
1030 6050 l
S
3580 5900 m
4160 6400 l
S
5060 5920 m
4160 6400 l
S
4330 5510 m
4160 6400 l
S
40 w
/DeviceRGB {} CS
[1 1 0] SC
4340 7865 m
4340 7845.67 4324.33 7830 4305 7830 c
4285.67 7830 4270 7845.67 4270 7865 c
4270 7884.33 4285.67 7900 4305 7900 c
4324.33 7900 4340 7884.33 4340 7865 c
S
1980 8115 m
1980 8095.67 1964.33 8080 1945 8080 c
1925.67 8080 1910 8095.67 1910 8115 c
1910 8134.33 1925.67 8150 1945 8150 c
1964.33 8150 1980 8134.33 1980 8115 c
S
1030 7765 m
1030 7745.67 1014.33 7730 995 7730 c
975.672 7730 960 7745.67 960 7765 c
960 7784.33 975.672 7800 995 7800 c
1014.33 7800 1030 7784.33 1030 7765 c
S
2930 7765 m
2930 7745.67 2914.33 7730 2895 7730 c
2875.67 7730 2860 7745.67 2860 7765 c
2860 7784.33 2875.67 7800 2895 7800 c
2914.33 7800 2930 7784.33 2930 7765 c
S
1980 6785 m
1980 6765.67 1964.33 6750 1945 6750 c
1925.67 6750 1910 6765.67 1910 6785 c
1910 6804.33 1925.67 6820 1945 6820 c
1964.33 6820 1980 6804.33 1980 6785 c
S
4340 7215 m
4340 7195.67 4324.33 7180 4305 7180 c
4285.67 7180 4270 7195.67 4270 7215 c
4270 7234.33 4285.67 7250 4305 7250 c
4324.33 7250 4340 7234.33 4340 7215 c
S
3810 7135 m
3810 7115.67 3794.33 7100 3775 7100 c
3755.67 7100 3740 7115.67 3740 7135 c
3740 7154.33 3755.67 7170 3775 7170 c
3794.33 7170 3810 7154.33 3810 7135 c
S
4870 7135 m
4870 7115.67 4854.33 7100 4835 7100 c
4815.67 7100 4800 7115.67 4800 7135 c
4800 7154.33 4815.67 7170 4835 7170 c
4854.33 7170 4870 7154.33 4870 7135 c
S
4490 6405 m
4490 6385.67 4474.33 6370 4455 6370 c
4435.67 6370 4420 6385.67 4420 6405 c
4420 6424.33 4435.67 6440 4455 6440 c
4474.33 6440 4490 6424.33 4490 6405 c
S
2430 5515 m
2430 5495.67 2414.33 5480 2395 5480 c
2375.67 5480 2360 5495.67 2360 5515 c
2360 5534.33 2375.67 5550 2395 5550 c
2414.33 5550 2430 5534.33 2430 5515 c
S
1140 6705 m
1140 6685.67 1124.33 6670 1105 6670 c
1085.67 6670 1070 6685.67 1070 6705 c
1070 6724.33 1085.67 6740 1105 6740 c
1124.33 6740 1140 6724.33 1140 6705 c
S
2910 6055 m
2910 6035.67 2894.33 6020 2875 6020 c
2855.67 6020 2840 6035.67 2840 6055 c
2840 6074.33 2855.67 6090 2875 6090 c
2894.33 6090 2910 6074.33 2910 6055 c
S
1980 6055 m
1980 6035.67 1964.33 6020 1945 6020 c
1925.67 6020 1910 6035.67 1910 6055 c
1910 6074.33 1925.67 6090 1945 6090 c
1964.33 6090 1980 6074.33 1980 6055 c
S
3610 5905 m
3610 5885.67 3594.33 5870 3575 5870 c
3555.67 5870 3540 5885.67 3540 5905 c
3540 5924.33 3555.67 5940 3575 5940 c
3594.33 5940 3610 5924.33 3610 5905 c
S
5090 5925 m
5090 5905.67 5074.33 5890 5055 5890 c
5035.67 5890 5020 5905.67 5020 5925 c
5020 5944.33 5035.67 5960 5055 5960 c
5074.33 5960 5090 5944.33 5090 5925 c
S
4360 5515 m
4360 5495.67 4344.33 5480 4325 5480 c
4305.67 5480 4290 5495.67 4290 5515 c
4290 5534.33 4305.67 5550 4325 5550 c
4344.33 5550 4360 5534.33 4360 5515 c
S
4190 6405 m
4190 6385.67 4174.33 6370 4155 6370 c
4135.67 6370 4120 6385.67 4120 6405 c
4120 6424.33 4135.67 6440 4155 6440 c
4174.33 6440 4190 6424.33 4190 6405 c
S
1540 5515 m
1540 5495.67 1524.33 5480 1505 5480 c
1485.67 5480 1470 5495.67 1470 5515 c
1470 5534.33 1485.67 5550 1505 5550 c
1524.33 5550 1540 5534.33 1540 5515 c
S
2820 6705 m
2820 6685.67 2804.33 6670 2785 6670 c
2765.67 6670 2750 6685.67 2750 6705 c
2750 6724.33 2765.67 6740 2785 6740 c
2804.33 6740 2820 6724.33 2820 6705 c
S
1060 6055 m
1060 6035.67 1044.33 6020 1025 6020 c
1005.67 6020 990 6035.67 990 6055 c
990 6074.33 1005.67 6090 1025 6090 c
1044.33 6090 1060 6074.33 1060 6055 c
S
Q
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
