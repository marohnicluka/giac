%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 419 273
%%HiResBoundingBox: 0 0 419 273
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 419 273 re
W
q
q
[1 0 0 1 -54 -7] cm
q
[1 0 0 1 0 0] cm
0 0 527 287 re
W
q
[0.1 0 0 0.1 0 0] cm
20 w
/DeviceRGB {} CS
[0 0 1] SC
3920 2480 m
3920 1830 l
S
3920 2480 m
3390 1750 l
S
3920 2480 m
4450 1750 l
S
1560 2730 m
1560 1400 l
S
610 2380 m
1560 1400 l
S
2510 2380 m
1560 1400 l
S
q
1270 5 1030 1685 re
W
1560 1400 m
2010 130 l
S
Q
1560 1400 m
720 1320 l
S
1560 1400 m
2490 670 l
S
q
830 5 1020 1685 re
W
1560 1400 m
1120 130 l
S
Q
1560 1400 m
2400 1320 l
S
1560 1400 m
640 670 l
S
3920 1830 m
4070 1020 l
S
3920 1830 m
3770 1020 l
S
3390 1750 m
4070 1020 l
S
3390 1750 m
3770 1020 l
S
4450 1750 m
4070 1020 l
S
4450 1750 m
3770 1020 l
S
4070 1020 m
3190 520 l
S
4070 1020 m
4670 540 l
S
q
3650 5 710 1305 re
W
4070 1020 m
3940 130 l
S
Q
q
1270 5 1030 955 re
W
2010 130 m
1560 670 l
S
Q
720 1320 m
1560 670 l
S
2490 670 m
1560 670 l
S
q
830 5 1020 955 re
W
1560 670 m
1120 130 l
S
Q
1560 670 m
2400 1320 l
S
1560 670 m
640 670 l
S
3190 520 m
3770 1020 l
S
4670 540 m
3770 1020 l
S
q
3480 5 750 1305 re
W
3940 130 m
3770 1020 l
S
Q
q
3310 1880 1210 985 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
3950 2485 m
3950 2465.66 3934.34 2450 3915 2450 c
3895.66 2450 3880 2465.66 3880 2485 c
3880 2504.34 3895.66 2520 3915 2520 c
3934.34 2520 3950 2504.34 3950 2485 c
S
Q
q
950 2130 1210 735 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
1590 2735 m
1590 2715.66 1574.34 2700 1555 2700 c
1535.66 2700 1520 2715.66 1520 2735 c
1520 2754.34 1535.66 2770 1555 2770 c
1574.34 2770 1590 2754.34 1590 2735 c
S
Q
q
0 1780 1210 1085 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
640 2385 m
640 2365.66 624.34 2350 605 2350 c
585.66 2350 570 2365.66 570 2385 c
570 2404.34 585.66 2420 605 2420 c
624.34 2420 640 2404.34 640 2385 c
S
Q
q
1900 1780 1210 1085 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
2540 2385 m
2540 2365.66 2524.34 2350 2505 2350 c
2485.66 2350 2470 2365.66 2470 2385 c
2470 2404.34 2485.66 2420 2505 2420 c
2524.34 2420 2540 2404.34 2540 2385 c
S
Q
40 w
/DeviceRGB {} CS
[1 1 0] SC
1590 1405 m
1590 1385.66 1574.34 1370 1555 1370 c
1535.66 1370 1520 1385.66 1520 1405 c
1520 1424.34 1535.66 1440 1555 1440 c
1574.34 1440 1590 1424.34 1590 1405 c
S
3950 1835 m
3950 1815.66 3934.34 1800 3915 1800 c
3895.66 1800 3880 1815.66 3880 1835 c
3880 1854.34 3895.66 1870 3915 1870 c
3934.34 1870 3950 1854.34 3950 1835 c
S
3420 1755 m
3420 1735.66 3404.34 1720 3385 1720 c
3365.66 1720 3350 1735.66 3350 1755 c
3350 1774.34 3365.66 1790 3385 1790 c
3404.34 1790 3420 1774.34 3420 1755 c
S
4480 1755 m
4480 1735.66 4464.34 1720 4445 1720 c
4425.66 1720 4410 1735.66 4410 1755 c
4410 1774.34 4425.66 1790 4445 1790 c
4464.34 1790 4480 1774.34 4480 1755 c
S
4100 1025 m
4100 1005.66 4084.34 990 4065 990 c
4045.66 990 4030 1005.66 4030 1025 c
4030 1044.34 4045.66 1060 4065 1060 c
4084.34 1060 4100 1044.34 4100 1025 c
S
q
1400 5 1210 735 re
W
2040 135 m
2040 115.66 2024.34 100 2005 100 c
1985.66 100 1970 115.66 1970 135 c
1970 154.34 1985.66 170 2005 170 c
2024.34 170 2040 154.34 2040 135 c
S
Q
750 1325 m
750 1305.66 734.34 1290 715 1290 c
695.66 1290 680 1305.66 680 1325 c
680 1344.34 695.66 1360 715 1360 c
734.34 1360 750 1344.34 750 1325 c
S
2520 675 m
2520 655.66 2504.34 640 2485 640 c
2465.66 640 2450 655.66 2450 675 c
2450 694.34 2465.66 710 2485 710 c
2504.34 710 2520 694.34 2520 675 c
S
1590 675 m
1590 655.66 1574.34 640 1555 640 c
1535.66 640 1520 655.66 1520 675 c
1520 694.34 1535.66 710 1555 710 c
1574.34 710 1590 694.34 1590 675 c
S
q
2580 5 1210 1125 re
W
3220 525 m
3220 505.66 3204.34 490 3185 490 c
3165.66 490 3150 505.66 3150 525 c
3150 544.34 3165.66 560 3185 560 c
3204.34 560 3220 544.34 3220 525 c
S
Q
q
4060 5 1210 1145 re
W
4700 545 m
4700 525.66 4684.34 510 4665 510 c
4645.66 510 4630 525.66 4630 545 c
4630 564.34 4645.66 580 4665 580 c
4684.34 580 4700 564.34 4700 545 c
S
Q
q
3330 5 1210 735 re
W
3970 135 m
3970 115.66 3954.34 100 3935 100 c
3915.66 100 3900 115.66 3900 135 c
3900 154.34 3915.66 170 3935 170 c
3954.34 170 3970 154.34 3970 135 c
S
Q
3800 1025 m
3800 1005.66 3784.34 990 3765 990 c
3745.66 990 3730 1005.66 3730 1025 c
3730 1044.34 3745.66 1060 3765 1060 c
3784.34 1060 3800 1044.34 3800 1025 c
S
q
510 5 1210 735 re
W
1150 135 m
1150 115.66 1134.34 100 1115 100 c
1095.66 100 1080 115.66 1080 135 c
1080 154.34 1095.66 170 1115 170 c
1134.34 170 1150 154.34 1150 135 c
S
Q
2430 1325 m
2430 1305.66 2414.34 1290 2395 1290 c
2375.66 1290 2360 1305.66 2360 1325 c
2360 1344.34 2375.66 1360 2395 1360 c
2414.34 1360 2430 1344.34 2430 1325 c
S
670 675 m
670 655.66 654.34 640 635 640 c
615.66 640 600 655.66 600 675 c
600 694.34 615.66 710 635 710 c
654.34 710 670 694.34 670 675 c
S
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
