%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 195 197
%%HiResBoundingBox: 0 0 195 197
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 195 197 re
W
q
q
[1 0 0 1 1 -45] cm
q
[1 0 0 1 0 0] cm
0 0 193 287 re
W
q
[0.1 0 0 0.1 0 0] cm
20 w
/DeviceRGB {} CS
[0 0 1] SC
1610 1320 m
1840 1480 l
S
1610 1320 m
1880 1220 l
S
1610 1320 m
1340 790 l
S
1610 1320 m
1440 1870 l
S
1840 1480 m
1880 1220 l
S
1840 1480 m
1540 950 l
S
1840 1480 m
1660 2060 l
S
1880 1220 m
1600 680 l
S
1880 1220 m
1700 1800 l
S
1340 790 m
1540 950 l
S
1340 790 m
1600 680 l
S
1340 790 m
770 610 l
S
1540 950 m
1600 680 l
S
1540 950 m
970 800 l
S
1600 680 m
1020 510 l
S
770 610 m
970 800 l
S
770 610 m
1020 510 l
S
770 610 m
230 900 l
S
970 800 m
1020 510 l
S
970 800 m
460 1070 l
S
1020 510 m
480 800 l
S
230 900 m
460 1070 l
S
230 900 m
480 800 l
S
230 900 m
60 1480 l
S
460 1070 m
480 800 l
S
460 1070 m
280 1640 l
S
480 800 m
330 1380 l
S
60 1480 m
280 1640 l
S
60 1480 m
330 1380 l
S
60 1480 m
350 2010 l
S
280 1640 m
330 1380 l
S
280 1640 m
550 2170 l
S
330 1380 m
610 1890 l
S
350 2010 m
550 2170 l
S
350 2010 m
610 1890 l
S
350 2010 m
930 2170 l
S
550 2170 m
610 1890 l
S
550 2170 m
1130 2350 l
S
610 1890 m
1170 2070 l
S
930 2170 m
1130 2350 l
S
930 2170 m
1170 2070 l
S
930 2170 m
1440 1870 l
S
1130 2350 m
1170 2070 l
S
1130 2350 m
1660 2060 l
S
1170 2070 m
1700 1800 l
S
1440 1870 m
1660 2060 l
S
1440 1870 m
1700 1800 l
S
1660 2060 m
1700 1800 l
S
40 w
/DeviceRGB {} CS
[1 1 0] SC
1640 1325 m
1640 1305.66 1624.34 1290 1605 1290 c
1585.66 1290 1570 1305.66 1570 1325 c
1570 1344.34 1585.66 1360 1605 1360 c
1624.34 1360 1640 1344.34 1640 1325 c
S
1870 1485 m
1870 1465.66 1854.34 1450 1835 1450 c
1815.66 1450 1800 1465.66 1800 1485 c
1800 1504.34 1815.66 1520 1835 1520 c
1854.34 1520 1870 1504.34 1870 1485 c
S
1910 1225 m
1910 1205.66 1894.34 1190 1875 1190 c
1855.66 1190 1840 1205.66 1840 1225 c
1840 1244.34 1855.66 1260 1875 1260 c
1894.34 1260 1910 1244.34 1910 1225 c
S
1370 795 m
1370 775.66 1354.34 760 1335 760 c
1315.66 760 1300 775.66 1300 795 c
1300 814.34 1315.66 830 1335 830 c
1354.34 830 1370 814.34 1370 795 c
S
1570 955 m
1570 935.66 1554.34 920 1535 920 c
1515.66 920 1500 935.66 1500 955 c
1500 974.34 1515.66 990 1535 990 c
1554.34 990 1570 974.34 1570 955 c
S
1630 685 m
1630 665.66 1614.34 650 1595 650 c
1575.66 650 1560 665.66 1560 685 c
1560 704.34 1575.66 720 1595 720 c
1614.34 720 1630 704.34 1630 685 c
S
800 615 m
800 595.66 784.34 580 765 580 c
745.66 580 730 595.66 730 615 c
730 634.34 745.66 650 765 650 c
784.34 650 800 634.34 800 615 c
S
1000 805 m
1000 785.66 984.34 770 965 770 c
945.66 770 930 785.66 930 805 c
930 824.34 945.66 840 965 840 c
984.34 840 1000 824.34 1000 805 c
S
q
410 5 1210 1115 re
W
1050 515 m
1050 495.66 1034.34 480 1015 480 c
995.66 480 980 495.66 980 515 c
980 534.34 995.66 550 1015 550 c
1034.34 550 1050 534.34 1050 515 c
S
Q
260 905 m
260 885.66 244.34 870 225 870 c
205.66 870 190 885.66 190 905 c
190 924.34 205.66 940 225 940 c
244.34 940 260 924.34 260 905 c
S
490 1075 m
490 1055.66 474.34 1040 455 1040 c
435.66 1040 420 1055.66 420 1075 c
420 1094.34 435.66 1110 455 1110 c
474.34 1110 490 1094.34 490 1075 c
S
510 805 m
510 785.66 494.34 770 475 770 c
455.66 770 440 785.66 440 805 c
440 824.34 455.66 840 475 840 c
494.34 840 510 824.34 510 805 c
S
90 1485 m
90 1465.66 74.3398 1450 55 1450 c
35.6602 1450 20 1465.66 20 1485 c
20 1504.34 35.6602 1520 55 1520 c
74.3398 1520 90 1504.34 90 1485 c
S
310 1645 m
310 1625.66 294.34 1610 275 1610 c
255.66 1610 240 1625.66 240 1645 c
240 1664.34 255.66 1680 275 1680 c
294.34 1680 310 1664.34 310 1645 c
S
360 1385 m
360 1365.66 344.34 1350 325 1350 c
305.66 1350 290 1365.66 290 1385 c
290 1404.34 305.66 1420 325 1420 c
344.34 1420 360 1404.34 360 1385 c
S
380 2015 m
380 1995.66 364.34 1980 345 1980 c
325.66 1980 310 1995.66 310 2015 c
310 2034.34 325.66 2050 345 2050 c
364.34 2050 380 2034.34 380 2015 c
S
580 2175 m
580 2155.66 564.34 2140 545 2140 c
525.66 2140 510 2155.66 510 2175 c
510 2194.34 525.66 2210 545 2210 c
564.34 2210 580 2194.34 580 2175 c
S
640 1895 m
640 1875.66 624.34 1860 605 1860 c
585.66 1860 570 1875.66 570 1895 c
570 1914.34 585.66 1930 605 1930 c
624.34 1930 640 1914.34 640 1895 c
S
960 2175 m
960 2155.66 944.34 2140 925 2140 c
905.66 2140 890 2155.66 890 2175 c
890 2194.34 905.66 2210 925 2210 c
944.34 2210 960 2194.34 960 2175 c
S
q
520 1750 1210 1115 re
W
1160 2355 m
1160 2335.66 1144.34 2320 1125 2320 c
1105.66 2320 1090 2335.66 1090 2355 c
1090 2374.34 1105.66 2390 1125 2390 c
1144.34 2390 1160 2374.34 1160 2355 c
S
Q
q
520 1750 1210 1115 re
W
1200 2075 m
1200 2055.66 1184.34 2040 1165 2040 c
1145.66 2040 1130 2055.66 1130 2075 c
1130 2094.34 1145.66 2110 1165 2110 c
1184.34 2110 1200 2094.34 1200 2075 c
S
1470 1875 m
1470 1855.66 1454.34 1840 1435 1840 c
1415.66 1840 1400 1855.66 1400 1875 c
1400 1894.34 1415.66 1910 1435 1910 c
1454.34 1910 1470 1894.34 1470 1875 c
S
1690 2065 m
1690 2045.66 1674.34 2030 1655 2030 c
1635.66 2030 1620 2045.66 1620 2065 c
1620 2084.34 1635.66 2100 1655 2100 c
1674.34 2100 1690 2084.34 1690 2065 c
S
Q
1730 1805 m
1730 1785.66 1714.34 1770 1695 1770 c
1675.66 1770 1660 1785.66 1660 1805 c
1660 1824.34 1675.66 1840 1695 1840 c
1714.34 1840 1730 1824.34 1730 1805 c
S
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
