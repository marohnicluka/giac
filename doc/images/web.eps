%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.48.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 201 197
%%HiResBoundingBox: 0 0 201 197
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 201 197 re
W
q
q
[1 0 0 1 -2 -45] cm
q
[1 0 0 1 0 0] cm
0 0 205 287 re
W
q
[0.1 0 0 0.1 0 0] cm
20 w
/DeviceRGB {} CS
[0 0 1] SC
1030 2350 m
1030 1900 l
S
1030 2350 m
1790 1990 l
S
1030 2350 m
270 1990 l
S
1030 1900 m
1030 1670 l
S
1030 1900 m
1430 1700 l
S
1030 1900 m
630 1700 l
S
1030 1670 m
1250 1560 l
S
1030 1670 m
810 1560 l
S
1790 1990 m
1430 1700 l
S
1790 1990 m
1970 1170 l
S
1430 1700 m
1250 1560 l
S
1430 1700 m
1530 1270 l
S
1250 1560 m
1310 1320 l
S
1970 1170 m
1530 1270 l
S
1970 1170 m
1450 510 l
S
1530 1270 m
1310 1320 l
S
1530 1270 m
1250 920 l
S
1310 1320 m
1150 1130 l
S
1450 510 m
1250 920 l
S
1450 510 m
610 510 l
S
1250 920 m
1150 1130 l
S
1250 920 m
810 920 l
S
1150 1130 m
910 1130 l
S
610 510 m
810 920 l
S
610 510 m
90 1170 l
S
810 920 m
910 1130 l
S
810 920 m
530 1270 l
S
910 1130 m
750 1320 l
S
90 1170 m
530 1270 l
S
90 1170 m
270 1990 l
S
530 1270 m
750 1320 l
S
530 1270 m
630 1700 l
S
750 1320 m
810 1560 l
S
270 1990 m
630 1700 l
S
630 1700 m
810 1560 l
S
q
420 1750 1210 1115 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
1060 2355 m
1060 2335.66 1044.34 2320 1025 2320 c
1005.66 2320 990 2335.66 990 2355 c
990 2374.34 1005.66 2390 1025 2390 c
1044.34 2390 1060 2374.34 1060 2355 c
S
Q
q
420 1750 1210 1115 re
W
40 w
/DeviceRGB {} CS
[1 1 0] SC
1060 1905 m
1060 1885.66 1044.34 1870 1025 1870 c
1005.66 1870 990 1885.66 990 1905 c
990 1924.34 1005.66 1940 1025 1940 c
1044.34 1940 1060 1924.34 1060 1905 c
S
Q
40 w
/DeviceRGB {} CS
[1 1 0] SC
1060 1675 m
1060 1655.66 1044.34 1640 1025 1640 c
1005.66 1640 990 1655.66 990 1675 c
990 1694.34 1005.66 1710 1025 1710 c
1044.34 1710 1060 1694.34 1060 1675 c
S
1820 1995 m
1820 1975.66 1804.34 1960 1785 1960 c
1765.66 1960 1750 1975.66 1750 1995 c
1750 2014.34 1765.66 2030 1785 2030 c
1804.34 2030 1820 2014.34 1820 1995 c
S
1460 1705 m
1460 1685.66 1444.34 1670 1425 1670 c
1405.66 1670 1390 1685.66 1390 1705 c
1390 1724.34 1405.66 1740 1425 1740 c
1444.34 1740 1460 1724.34 1460 1705 c
S
1280 1565 m
1280 1545.66 1264.34 1530 1245 1530 c
1225.66 1530 1210 1545.66 1210 1565 c
1210 1584.34 1225.66 1600 1245 1600 c
1264.34 1600 1280 1584.34 1280 1565 c
S
2000 1175 m
2000 1155.66 1984.34 1140 1965 1140 c
1945.66 1140 1930 1155.66 1930 1175 c
1930 1194.34 1945.66 1210 1965 1210 c
1984.34 1210 2000 1194.34 2000 1175 c
S
1560 1275 m
1560 1255.66 1544.34 1240 1525 1240 c
1505.66 1240 1490 1255.66 1490 1275 c
1490 1294.34 1505.66 1310 1525 1310 c
1544.34 1310 1560 1294.34 1560 1275 c
S
1340 1325 m
1340 1305.66 1324.34 1290 1305 1290 c
1285.66 1290 1270 1305.66 1270 1325 c
1270 1344.34 1285.66 1360 1305 1360 c
1324.34 1360 1340 1344.34 1340 1325 c
S
q
840 5 1210 1115 re
W
1480 515 m
1480 495.66 1464.34 480 1445 480 c
1425.66 480 1410 495.66 1410 515 c
1410 534.34 1425.66 550 1445 550 c
1464.34 550 1480 534.34 1480 515 c
S
Q
q
840 5 1210 1115 re
W
1280 925 m
1280 905.66 1264.34 890 1245 890 c
1225.66 890 1210 905.66 1210 925 c
1210 944.34 1225.66 960 1245 960 c
1264.34 960 1280 944.34 1280 925 c
S
Q
1180 1135 m
1180 1115.66 1164.34 1100 1145 1100 c
1125.66 1100 1110 1115.66 1110 1135 c
1110 1154.34 1125.66 1170 1145 1170 c
1164.34 1170 1180 1154.34 1180 1135 c
S
q
0 5 1210 1115 re
W
640 515 m
640 495.66 624.34 480 605 480 c
585.66 480 570 495.66 570 515 c
570 534.34 585.66 550 605 550 c
624.34 550 640 534.34 640 515 c
S
Q
q
0 5 1210 1115 re
W
840 925 m
840 905.66 824.34 890 805 890 c
785.66 890 770 905.66 770 925 c
770 944.34 785.66 960 805 960 c
824.34 960 840 944.34 840 925 c
S
Q
940 1135 m
940 1115.66 924.34 1100 905 1100 c
885.66 1100 870 1115.66 870 1135 c
870 1154.34 885.66 1170 905 1170 c
924.34 1170 940 1154.34 940 1135 c
S
120 1175 m
120 1155.66 104.34 1140 85 1140 c
65.6602 1140 50 1155.66 50 1175 c
50 1194.34 65.6602 1210 85 1210 c
104.34 1210 120 1194.34 120 1175 c
S
560 1275 m
560 1255.66 544.34 1240 525 1240 c
505.66 1240 490 1255.66 490 1275 c
490 1294.34 505.66 1310 525 1310 c
544.34 1310 560 1294.34 560 1275 c
S
780 1325 m
780 1305.66 764.34 1290 745 1290 c
725.66 1290 710 1305.66 710 1325 c
710 1344.34 725.66 1360 745 1360 c
764.34 1360 780 1344.34 780 1325 c
S
300 1995 m
300 1975.66 284.34 1960 265 1960 c
245.66 1960 230 1975.66 230 1995 c
230 2014.34 245.66 2030 265 2030 c
284.34 2030 300 2014.34 300 1995 c
S
660 1705 m
660 1685.66 644.34 1670 625 1670 c
605.66 1670 590 1685.66 590 1705 c
590 1724.34 605.66 1740 625 1740 c
644.34 1740 660 1724.34 660 1705 c
S
840 1565 m
840 1545.66 824.34 1530 805 1530 c
785.66 1530 770 1545.66 770 1565 c
770 1584.34 785.66 1600 805 1600 c
824.34 1600 840 1584.34 840 1565 c
S
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
